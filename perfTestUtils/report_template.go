// Code generated by go-bindata.
// sources:
// report/content.tmpl
// report/footer.tmpl
// report/header.tmpl
// report/test.tmpl
// DO NOT EDIT!

package perfTestUtils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _reportContentTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x58\x6f\x6f\xdb\x36\x13\x7f\x9d\x7c\x8a\x83\x1e\x1b\x71\x80\xc2\x4e\xda\x26\x78\x1e\x3d\xb2\x01\xbb\xdb\xda\x74\xcd\x66\xd4\x59\xdf\x0c\x7b\x41\x8b\x67\x99\x8b\x4c\x7a\x24\xed\xc6\x53\xf5\xdd\x07\xea\x9f\x65\x4b\x94\xd5\xa2\xc1\x04\xe4\x85\xc9\xe3\xdd\xf1\xee\x77\xc7\xdf\x25\x8a\x28\x2e\x18\x47\x70\x7c\xc1\x35\x72\xed\xc4\xf1\x39\x80\x47\xd9\x16\xfc\x90\x28\x35\x74\xb4\x58\x4f\x88\x74\x46\xe7\x50\xfa\xbc\xe5\x75\xbe\xbf\x26\x94\x32\x1e\x38\xa3\x28\xea\xbf\x11\x7c\xc1\x82\xfe\x78\x7a\xf7\x0b\x59\x61\x1c\x83\xeb\xc2\x78\xa3\xc5\x8a\x68\xa4\x30\x45\xb9\x10\x72\x45\xb8\x8f\xf0\x80\x4a\xc3\x47\x5c\x0b\xa9\x8d\x50\x2f\x8a\xfa\x66\x7b\xa6\x89\x56\xfd\xb7\xa8\xcd\xfe\x03\x33\x3a\x2e\xbd\xc1\xf2\x7a\x6f\xdd\x1b\x50\xb6\x2d\xfd\x2c\x79\x4a\xd9\xf6\x1d\x92\xd4\x99\xbd\xb7\x9e\x26\xf3\x10\x6b\x64\x60\x2e\x24\x45\x39\x74\xae\x1c\xf8\xcc\xa8\x5e\x0e\x9d\xff\x5d\x75\x4b\x47\x3d\x2d\x0f\x6f\x7d\x10\x01\x4d\xf3\x53\x37\xe6\x94\xb7\xbc\xad\x44\xe4\x9d\x50\x1a\x36\x9c\xa2\x04\x8d\x4a\xbb\xb0\x0f\xd1\x03\x91\x01\x6a\x23\x10\xc7\xee\xf1\xf2\x54\x48\x1d\xc7\xde\x60\x79\x3b\xf2\x06\x9a\xda\x9d\x68\x70\xea\xe5\x8d\xc5\xa9\x19\xca\x2d\xf3\x51\x1d\x39\x16\x22\x87\x52\x0a\x32\xa9\x8f\xa8\xd6\x82\x2b\x34\xa9\x50\xcf\xe6\xd2\x09\xb5\xde\xc0\x96\x08\x6f\x90\x24\xd7\xb6\xd9\x06\x29\x20\xb8\x1f\x32\xff\x71\xe8\x2c\x19\xc5\x7b\x5c\x09\xb9\x1b\x73\x12\xee\x14\x53\xbd\xcb\x63\xd8\x7f\x33\x96\xf6\x1a\x6c\x57\xa9\xe0\xe9\x55\x25\x4e\xa9\x77\x90\xbb\xe7\x0d\x96\xaf\x9a\xc2\xd6\x22\xf2\xe3\x30\x14\x9f\x91\xc2\x27\x22\x59\x52\x97\x65\x8c\x26\x9b\xe6\xc2\x53\x24\x8f\xa9\xed\x42\xee\x0b\xac\x25\xe3\x7a\x01\x4e\xf7\x75\xff\xe5\xc2\x89\xe3\xee\xa9\x2c\xb6\x70\x27\x8a\xd8\x02\xfa\x77\x2a\x35\x36\x25\x4a\x41\x1c\x7b\x0b\xc1\x35\xf8\x22\x14\x72\xe8\x04\x12\x91\x3b\xa3\xe9\x78\x36\xf3\x06\x66\x63\x14\x45\x18\x2a\x3c\x12\x93\x48\x9d\xd1\x4f\xe3\xbb\x0f\x7b\x21\x4e\x1b\xf1\x5b\x05\x59\x05\x5c\x75\x80\x62\x74\xe8\xac\x12\x6f\xdf\x08\xae\x09\xe3\x58\x69\x95\xe5\x5e\x9a\x44\x33\xbf\x6d\x0d\x38\xca\xf0\xca\xa3\xd2\x0c\xa8\x46\x50\xe5\x71\xcf\x55\x5c\xdf\x5e\x39\x23\x6f\x32\x9a\x10\x85\x60\xb2\x0a\x69\xa4\x5d\x6f\x30\x39\x51\xd7\x9e\xa6\xa6\xc3\x9b\x93\xfb\x2e\x91\xfe\xca\xc1\x01\x5f\x60\x85\xab\x07\x71\x3f\x81\x2f\x90\x74\x7a\x7d\x8f\xab\x38\xbe\x9f\x9c\x54\x5d\x38\x78\x63\x1c\x9c\x8f\x92\xe7\xe1\xd0\xc1\x79\x3b\x07\xf7\xce\x7d\x5f\xc7\xae\x53\xc7\xba\x45\xa9\xb4\x73\x09\x12\x48\x73\xa1\x0f\x61\x1d\xc7\x4a\xef\x42\x1c\x3a\x09\x5e\x5d\x03\xd7\x0c\xa2\xe9\x1d\x8e\xeb\x6d\x8a\xd2\x47\xae\x49\x80\x87\x37\xe8\x7e\x6d\xd7\xac\xed\x98\x19\xb0\x6d\xb0\xbd\xf0\x73\x68\x5f\xd4\x28\x2c\xcb\x2d\x89\xd4\x35\x32\x50\xaa\x96\x8b\x0f\x8c\xe3\x9b\x54\xf0\xa8\xa0\x8e\xdc\x39\xb5\xa4\x7c\xc9\xd6\xba\x7a\x7c\x4b\x24\x14\x46\xde\xcf\x60\x08\xfe\xab\x7e\x80\x1c\x25\xd1\xd8\x8b\x2a\xf2\x94\x68\xe2\x42\x75\xdd\x7c\xbe\x08\x37\x2b\xae\x5c\xf8\xdd\x96\xe4\x28\xfa\x53\x09\x7e\x8f\x2b\x70\x4c\x35\x38\x70\x54\x22\xd9\x8b\xb2\xa1\x4c\xc7\xf1\x8b\x16\x5a\x0c\xf4\x9d\xf2\x53\x7c\xa0\xa1\x56\xc1\x1f\x95\xd5\x1a\x4b\x7f\x0b\xb1\xb2\x5d\x13\xb9\x01\x05\x75\x41\xcb\x0d\xb6\x51\x06\x6a\x33\x4f\xb2\x6d\xd3\xa8\x96\xe2\x73\x7b\x75\xe4\x89\x29\x9b\xa6\x9d\x6d\xc3\x7c\x21\x99\x63\xe8\xc2\x45\x56\xe7\xbd\x9f\x27\x97\x17\xb5\xc2\x35\x46\x6b\x96\x02\xc9\xa8\xd5\xdc\x53\xa3\x23\x8c\x63\x13\x4c\x0e\xbe\x28\xea\xbf\x57\x82\x9b\x4c\x4f\x89\xd4\x4c\x33\xc1\x95\x25\xb7\xe5\xaf\x9a\xe7\xe2\xab\x3f\x7c\xb8\x1a\x5f\xfe\xff\x50\xaa\xd3\x73\xfe\x53\x54\x8a\x73\xd9\x27\xeb\x35\x72\xda\x2b\x15\x4f\x1f\x43\x5c\x21\xd7\x47\x27\xbd\xc1\x71\xf1\x1d\xb7\x90\x56\x6c\x2b\x23\x99\xff\x32\xdd\x7a\x6d\xa3\x5b\x99\x7b\x90\x93\x60\x30\x2c\xf8\x5b\xd8\x97\x6d\x3e\x68\xc7\xbe\x6a\xa8\xf8\x77\xa2\x61\x36\xbf\x7e\xdd\xa2\x1c\x87\x21\x3c\x4c\x67\xa9\x4b\xfb\x66\x94\x6d\x99\x9d\xaa\xed\xef\x60\xfa\x80\xc5\xe5\x74\xd0\x5c\x39\x7d\x35\x4b\xf4\x2f\xe7\x7d\x05\xd5\x2b\x38\x5e\xc2\xf8\x9e\x87\xea\xa9\x34\x17\x75\x5c\xaf\x25\xcf\xcb\x30\x7d\x0a\xb5\x90\xf1\x83\x39\xf1\x1f\x03\x29\x36\x9c\xba\x1f\x58\xb0\xd4\x6f\x25\xd9\x59\x59\xe0\x3e\xbc\xff\xed\x16\x34\xca\x4c\xe2\xcd\x54\xa5\x4c\x73\xb2\x83\xe6\x0d\x4b\xd0\xde\xbb\x67\x61\xc8\x2e\xbf\x5a\x41\x3e\xbf\x7f\xb3\x82\xee\x36\xc3\xf8\xd7\x9b\x9e\xce\xec\x67\xd2\xdc\xd7\xaa\x8a\x22\x49\x78\x80\xd0\x79\xc4\xdd\x0b\xe8\xcc\x0d\x47\x76\x87\xd0\xa9\xe1\xbc\xf5\xd3\x71\xad\xd6\xb3\x54\x75\x87\x6c\x03\xa3\x8d\x71\x8a\x4f\xd0\x39\x31\x69\x27\x3e\xc0\x09\x8d\x7a\xad\x1a\x35\x9a\x1a\x6d\xa1\xc7\xd0\xd3\xf4\xd2\xe0\xcc\x34\x91\xfa\xb7\xb5\xd3\x74\xe2\x2c\x3d\x83\x7f\x41\x72\xa7\x2b\x9b\xec\x59\x9e\x20\x09\x4b\x34\xd0\x1d\x5e\x5f\xad\x9f\x46\x29\x4d\x37\xe6\x4c\xa9\x6a\x9a\x2d\x98\xe2\x49\x43\x7e\x8d\xb7\x87\x1c\xb7\x90\x32\x45\xfe\xe3\x0f\xf9\x4f\xa8\x30\xe8\x03\x01\xeb\xff\x0c\xce\xcc\x05\xd2\xd6\x71\x7e\x76\xf6\x0c\x6e\x66\x52\x26\x38\x56\xa1\x34\x86\x9d\xfe\x9d\xca\x93\x95\xb5\x38\x48\x4d\xe6\x1e\x36\x4c\x09\x64\x1b\x7c\x22\x32\xb5\x93\xba\x54\xfb\x18\x14\x4e\x25\x78\xa9\xeb\xd9\x8d\xd1\x3a\xf8\x32\xe3\x8d\x82\x0d\x32\x75\x5b\xad\x3a\xef\x89\x31\xa4\xcd\x08\x52\x8c\x1f\x73\x22\xed\xd3\xc7\xb1\xf1\xa3\x9f\x35\x13\x87\x19\x36\x72\x95\xcf\x3e\x6b\x14\xc4\x91\xad\x70\x2c\x25\xd9\xd9\xe6\x81\xfa\x39\x43\xef\xd6\xe8\x82\x89\x40\x95\x23\x3f\xf7\xc0\x30\x27\xd2\xa6\x2b\x69\xdf\x4d\xdc\x5a\x12\xcd\x84\x0b\x57\xfd\x9b\x16\x24\xd7\x62\xdf\x36\x61\x58\xa7\x8b\x7c\xb2\x18\x6f\x83\x84\x00\x42\xe9\x35\x9b\xa1\x2f\x38\x55\x35\xa3\x86\x65\xc2\x6b\x1c\x1d\xb2\xb4\xf8\x44\x63\x20\xe4\xee\xc2\x3a\x24\x42\x26\xc2\xcc\xa4\x51\x82\x42\xd6\x42\xcc\x43\x6f\x7b\x85\x6a\x62\xd4\x38\x1a\x98\xc9\x20\x87\xf5\x7e\x30\xd8\x03\xbd\x66\x2e\xb0\xce\x04\xc5\xcf\xb9\x1c\x35\xfd\x9d\x67\xfd\xe1\x9f\x00\x00\x00\xff\xff\x54\x46\xfe\x2d\x94\x18\x00\x00")

func reportContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportContentTmpl,
		"report/content.tmpl",
	)
}

func reportContentTmpl() (*asset, error) {
	bytes, err := reportContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/content.tmpl", size: 6292, mode: os.FileMode(420), modTime: time.Unix(1490199234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\xaa\xad\xe5\x52\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x4e\xcd\x4b\xa9\xad\x05\x04\x00\x00\xff\xff\x70\x9a\x96\xda\x2c\x00\x00\x00")

func reportFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportFooterTmpl,
		"report/footer.tmpl",
	)
}

func reportFooterTmpl() (*asset, error) {
	bytes, err := reportFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/footer.tmpl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1480093259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x97\x5b\x6f\xe2\x38\x14\xc7\xdf\xf9\x14\x9e\xec\xcb\x8c\xb4\xce\x85\x50\x86\xb0\x80\xd4\x0b\xda\x56\xea\xee\x54\x5b\x5e\xfa\xb4\x72\xec\x63\x62\xea\xd8\x59\xdb\xd0\x32\x88\xef\xbe\x4a\xe8\x0a\x25\xd0\x16\x7a\x91\x36\x12\x92\x0d\xf6\xf9\xff\xce\xf9\x1f\x0c\x5e\xad\x18\x70\xa1\x00\x79\x19\x10\x06\xc6\x5b\xaf\x5b\x83\x2f\x17\x3f\xce\x27\x77\x37\x63\x94\xb9\x5c\x8e\x5a\x2d\x84\x10\x1a\x5c\x8e\x4f\x2f\x46\xd5\xb0\x9a\x4e\xae\x26\xd7\xe3\xd1\x6a\xe5\x9f\x6b\xc5\xc5\xd4\x3f\xbd\xb9\xfa\x93\xe4\xb0\x5e\xa3\xd3\xb9\xd3\x39\x71\xc0\xd0\x0d\x18\xae\x4d\x4e\x14\x05\x34\x01\xeb\xd0\x5f\x50\x68\xe3\x06\xc1\x66\x73\xab\xb5\x0d\x67\xa9\x11\x85\x43\xd6\xd0\xa1\x97\x39\x57\xf4\x83\x80\xc6\x33\xeb\x6b\x33\x0d\x66\x36\x98\xfd\x33\x07\xb3\xc4\x91\x1f\x45\x7e\xe8\xe7\x42\xe1\x24\x0a\xc3\x6e\x97\xa7\xfe\xcc\x7a\xc8\x2d\x0b\x18\x7a\x0e\x1e\x5d\x30\x23\x0b\xb2\x09\xe6\x8d\x06\xc1\x66\x34\x3a\x58\x87\xc5\x38\xf6\x4f\x9e\x24\xe2\xf4\xa4\xdb\x89\x93\xf6\xc7\x4a\xd0\xb8\x0a\x1e\xb5\x93\xa8\xcd\xd3\xee\x91\xc1\xbf\x60\xfc\x9a\x00\xd7\x73\xc5\x88\x13\x5a\x6d\x84\x18\x87\x5e\x14\x85\x07\x09\x61\x7c\x9c\x56\x26\xa6\x99\x14\xd3\xcc\xf9\x05\xa1\xf7\xb8\x43\xf8\x49\x18\x76\xd8\xa7\x68\x2d\x40\x31\x6d\x82\x5c\x33\x30\x4a\xfc\x34\xb8\xed\x77\xfd\xa8\xca\xb1\xdb\xe3\x8c\xd2\x24\x39\x58\x77\x2b\x2c\x85\xba\x47\x99\x01\xbe\xab\x49\xad\x0d\x54\xd9\xbf\x52\xfc\x04\x0c\x9d\xee\x09\x4d\x7b\x5d\x9f\x5a\xeb\xa1\x1c\x98\x20\x43\xcf\x52\x03\xa0\x3c\x64\x40\x0e\x3d\xeb\x96\x12\x6c\x06\xe0\x6a\x10\xd5\xfa\x60\x74\xb0\x64\xc3\xbf\xe4\x7b\x8f\x75\x28\xf4\x3e\x5d\x97\xc6\x38\x0d\xe3\xa8\x7d\xc2\xc9\xa7\x6b\x55\x61\x70\x92\xf0\xb4\x97\xf4\x92\xf7\xcb\x95\xed\xf3\x9a\x24\xc9\x0b\x09\x36\xa0\x19\x31\xee\x6f\x5b\x48\xa1\x00\x33\x12\x27\x24\x06\x78\x2b\xc1\x4e\x0f\xbf\x02\xe1\x74\xae\x8d\xd1\x0f\x98\x7d\xa7\x3c\x4c\xda\xd1\x7b\x84\xb7\xca\xb7\x93\xbb\xeb\x71\x73\xd5\x96\xac\x7c\xce\x7e\x5c\xdc\xa1\x55\xed\xad\xf2\x49\x09\xbd\x9f\x9a\xb2\xe3\xfa\xe8\x21\x13\x0e\x7e\xdb\x59\x42\xb5\xd4\xa6\x8f\x52\x49\xe8\x7d\xed\xc3\x75\xab\x36\xf5\x9d\x2e\xce\x88\xd9\xd5\x28\x08\x63\x42\x4d\xb1\xd3\x45\x1f\xe1\x28\x2c\x1e\x77\x45\xb6\x1c\xf8\x49\xef\xba\x3c\x56\x6e\x25\x71\xf0\xbb\x21\xcb\x3d\x3b\xb4\x61\x60\x70\x55\xa6\x3e\x9a\x1a\xad\x17\x0d\xf8\x06\x5f\x16\xf9\x4f\x24\x7b\xea\xf0\x1f\xa3\x04\xee\xfa\xa8\xb7\x97\x91\x6b\xe5\xfa\x28\x0e\x8b\x47\x44\x8c\x20\xf2\x57\x64\x89\xb2\xd8\x82\x11\xfc\xd9\xb2\x3d\x53\xd4\xd2\x25\x6c\x33\xc2\xf4\x43\x1f\x45\xc5\x63\xf5\xaa\x52\xde\xcd\xb6\x99\x47\xfc\xce\x3c\x3e\x92\xac\x06\xd6\xfd\x1f\x81\xd5\x5b\x93\x89\xc5\x25\x90\x12\xe0\xa5\xaf\x40\xad\xf5\xce\xe4\x7c\x0f\x44\xbd\xeb\x94\x56\x2f\xf7\x9c\xef\x48\x2a\xe1\xe6\xcd\x55\x69\x84\xfb\x25\x87\x5c\x9b\xe5\xb9\x56\x8e\x08\x05\x66\x4f\xc4\x0c\x4a\xf8\x7e\x27\x7c\x29\xd6\x20\xa8\x4e\x8c\x9d\x3f\x2d\xf5\x23\x63\x41\x0c\x12\xf6\x8f\x4a\xf2\x54\x11\xb9\xb4\xc2\x5e\x0a\xc6\x40\xa1\x21\xe2\x44\xda\x46\xee\x7c\xae\x68\xf9\xb3\x85\x32\xc1\xa0\xbe\xed\xeb\xb7\x5d\x52\xc1\xbf\xee\x8f\xbe\x67\x6d\xf9\x30\x4d\xe7\x39\x28\xe7\x4f\xc1\x8d\x25\x94\xc3\xb3\xe5\x15\xfb\xea\x35\x8a\xe2\x7d\xf3\x2b\x7b\x7c\x26\x6c\x21\xc9\x12\x0d\x91\x27\x54\x79\xdc\x7b\xbb\x7e\x56\x20\x47\xe4\x58\x15\x12\xa4\x85\x8f\x67\x2c\x9b\xe9\x58\x42\x67\xf6\x35\x69\xa3\x6b\x1a\xd3\x8d\xad\xb7\x60\x16\x82\xc2\xd1\xbe\x36\xf6\x3d\x6b\xec\xde\xf8\xc7\x3a\x6b\x37\x41\xde\x63\xed\x11\x79\xa2\x37\x7a\x7b\x08\xe5\x8b\xe6\x3e\xc7\x78\xac\xbb\xdb\xfb\xc2\xe6\xca\x16\x6c\xee\x6c\x9b\x49\xaa\xd9\x72\xd4\x5a\xad\x40\xb1\xf5\xfa\xdf\x00\x00\x00\xff\xff\x71\xac\x47\x54\xf7\x0d\x00\x00")

func reportHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportHeaderTmpl,
		"report/header.tmpl",
	)
}

func reportHeaderTmpl() (*asset, error) {
	bytes, err := reportHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/header.tmpl", size: 3575, mode: os.FileMode(420), modTime: time.Unix(1480093259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportTestTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x97\x5d\x6f\xf2\x36\x14\xc7\xef\xf9\x14\x7e\xb2\x9b\x3e\xd2\x9c\x17\x02\x3c\x84\x01\x52\x5f\xd0\x5a\xa9\xdb\x53\xad\xdc\xf4\x6a\x72\xec\x63\x62\xea\xd8\x99\x6d\x68\x69\xd5\xef\x3e\x25\x74\x42\x09\xb4\x85\xbe\x48\x8b\x84\x64\x83\x7d\xfe\xbf\x73\xfe\x07\x83\x87\xdf\xce\x7e\x9e\x4e\x6f\xae\x26\x28\x73\xb9\x1c\xb7\x5a\x08\x21\x34\x3c\x9f\x1c\x9f\x8d\xab\x61\x35\x9d\x5e\x4c\x2f\x27\xe3\xc7\x47\xff\x54\x2b\x2e\x66\xfe\xf1\xd5\xc5\x9f\x24\x87\xa7\x27\x74\xbc\x70\x3a\x27\x0e\x18\xba\x02\xc3\xb5\xc9\x89\xa2\x80\xa6\x60\x1d\xfa\x0b\x0a\x6d\xdc\x30\x58\x6f\x6e\xb5\x36\xe1\x2c\x35\xa2\x70\xc8\x1a\x3a\xf2\x32\xe7\x8a\x41\x10\xd0\x78\x6e\x7d\x6d\x66\xc1\xdc\x06\xf3\x7f\x16\x60\x56\x38\xf2\xa3\xc8\x0f\xfd\x5c\x28\x9c\x44\x61\xd8\xeb\xf1\xd4\x9f\x5b\x0f\xb9\x55\x01\x23\xcf\xc1\xbd\x0b\xe6\x64\x49\xd6\xc1\xbc\xf1\x30\x58\x8f\xc6\x7b\xeb\xb0\x18\xc7\x7e\xf7\x59\x22\x4e\xbb\xbd\x4e\x9c\xb4\x3f\x57\x82\xc6\x55\xf0\xa8\x9d\x44\x6d\x9e\xf6\x0e\x0c\xfe\x0d\xe3\xb7\x04\xb8\x5e\x28\x46\x9c\xd0\x6a\x2d\xc4\x38\xf4\xa3\x28\xdc\x4b\x08\xe3\xc3\xb4\x32\x31\xcb\xa4\x98\x65\xce\x2f\x08\xbd\xc5\x1d\xc2\xbb\x61\xd8\x61\x5f\xa2\xb5\x04\xc5\xb4\x09\x72\xcd\xc0\x28\xf1\x60\x70\xdb\xef\xf9\x51\x95\x63\xaf\xcf\x19\xa5\x49\xb2\xb7\xee\x46\x58\x0a\x75\x8b\x32\x03\x7c\x5b\x93\x5a\x1b\xa8\xb2\x7f\xa5\x78\x00\x0c\x9d\x5e\x97\xa6\xfd\x9e\x4f\xad\xf5\x50\x0e\x4c\x90\x91\x67\xa9\x01\x50\x1e\x32\x20\x47\x9e\x75\x2b\x09\x36\x03\x70\x35\x88\x6a\x7d\x30\xde\x5b\xb2\xe1\x5f\xf2\xa3\xcf\x3a\x14\xfa\x5f\xae\x4b\x63\x9c\x86\x71\xd4\xee\x72\xf2\xe5\x5a\x55\x18\x9c\x24\x3c\xed\x27\xfd\xe4\xe3\x72\x65\xfb\xbc\x25\x49\xf2\x42\x82\x0d\x68\x46\x8c\xfb\xdb\x16\x52\x28\xc0\x8c\xc4\x09\x89\x01\xde\x4b\xb0\xd5\xc3\x6f\x40\x38\x9d\x6b\x63\xf4\x1d\x66\x3f\x28\x0f\x93\x76\xf4\x11\xe1\x8d\xf2\xf5\xf4\xe6\x72\xd2\x5c\xb5\x21\x2b\x9f\x93\x9f\x67\x37\xe8\xb1\xf6\x56\xf9\xa4\x84\xde\xce\x4c\xd9\x71\x03\x74\x97\x09\x07\xbf\x6d\x2d\xa1\x5a\x6a\x33\x40\xa9\x24\xf4\xb6\xf6\xe1\x53\xab\x36\xf5\x9d\x2e\x4e\x88\xd9\xd6\x28\x08\x63\x42\xcd\xb0\xd3\xc5\x00\xe1\x28\x2c\xee\xb7\x45\x36\x1c\xf8\x59\xef\xb2\x3c\x56\xae\x25\x71\xf0\xbb\x21\xab\x1d\x3b\xb4\x61\x60\x70\x55\xa6\x01\x9a\x19\xad\x97\x0d\xf8\x06\x5f\x16\xf9\xcf\x24\x3b\xea\xf0\x1f\xa3\x04\xee\x06\xa8\xbf\x93\x91\x6b\xe5\x06\x28\x0e\x8b\x7b\x44\x8c\x20\xf2\x57\x64\x89\xb2\xd8\x82\x11\xfc\xc5\xb2\xbd\x50\xd4\xd2\x25\x6c\x33\xc2\xf4\xdd\x00\x45\xc5\x7d\xf5\xaa\x52\xde\xce\xb6\x99\x47\xfc\xc1\x3c\x3e\x93\xac\x06\xd6\xfb\x1f\x81\xd5\x5b\x93\x89\xe5\x39\x90\x12\xe0\xb5\xaf\x40\xad\xf5\x4e\xe4\x62\x07\x44\xbd\xeb\x94\x56\xaf\xf7\x9c\xef\x48\x2a\xe1\xea\xdd\x55\x69\x84\xfb\x25\x87\x5c\x9b\xd5\xa9\x56\x8e\x08\x05\x66\x47\xc4\x0c\x4a\xf8\x41\x27\x7c\x2d\xd6\x30\xa8\x4e\x8c\xad\x3f\x2d\xf5\x23\x63\x49\x0c\x12\xf6\x8f\x4a\xf2\x58\x11\xb9\xb2\xc2\x9e\x0b\xc6\x40\xa1\x11\xe2\x44\xda\x46\xee\x7c\xa1\x68\xf9\xb3\x85\x32\xc1\xa0\xbe\xed\xe8\xfb\x36\xa9\xe0\x47\xbb\xa3\xef\x58\x5b\x3e\x4c\xd3\x45\x0e\xca\xf9\x33\x70\x13\x09\xe5\xf0\x64\x75\xc1\x8e\xbc\x46\x51\xbc\xef\x7e\x65\x8f\xcf\x84\x2d\x24\x59\xa1\x11\xf2\x84\x2a\x8f\x7b\x6f\xdb\xcf\x0a\xe4\x80\x1c\xab\x42\x82\xb4\xf0\xf9\x8c\x65\x33\x1d\x4a\xe8\xcc\xae\x26\x6d\x74\x4d\x63\xba\xb6\xf5\x1a\xcc\x52\x50\x38\xd8\xd7\xc6\xbe\x17\x8d\xdd\x19\xff\x50\x67\xed\x3a\xc8\x47\xac\x3d\x20\x4f\xf4\x4e\x6f\xf7\xa1\x7c\xd5\xdc\x97\x18\x0f\x75\x77\x73\x5f\x58\x5f\xd9\x82\xf5\x9d\x6d\x3d\x49\x35\x5b\x8d\xff\x0d\x00\x00\xff\xff\x1f\x48\x7c\x53\xdb\x0d\x00\x00")

func reportTestTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportTestTmpl,
		"report/test.tmpl",
	)
}

func reportTestTmpl() (*asset, error) {
	bytes, err := reportTestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/test.tmpl", size: 3547, mode: os.FileMode(420), modTime: time.Unix(1480093259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"report/content.tmpl": reportContentTmpl,
	"report/footer.tmpl": reportFooterTmpl,
	"report/header.tmpl": reportHeaderTmpl,
	"report/test.tmpl": reportTestTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"report": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{reportContentTmpl, map[string]*bintree{}},
		"footer.tmpl": &bintree{reportFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{reportHeaderTmpl, map[string]*bintree{}},
		"test.tmpl": &bintree{reportTestTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

