// Code generated by go-bindata.
// sources:
// report/content.tmpl
// report/footer.tmpl
// report/header.tmpl
// report/test.tmpl
// DO NOT EDIT!

package perfTestUtils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _reportContentTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\xed\x8f\xe2\xb6\x13\xfe\xbc\xf7\x57\x8c\xf2\x5b\x04\x48\x27\x5e\x6e\x7f\xbb\x52\x53\x40\x82\x6b\x7b\x2f\xbd\xad\xd0\xb1\xed\x97\xaa\x1f\x4c\x62\xc0\xdd\x90\x50\xc7\xec\x2e\xa5\xf9\xdf\x3b\x8e\x93\x90\x17\x3b\xe4\x4e\xa5\x6a\x24\x24\x12\x8f\xc7\x8f\x67\x9e\x19\x3f\x3e\x1e\x5d\xba\x62\x3e\x05\xcb\x09\x7c\x41\x7d\x61\x45\xd1\x2b\x80\x91\xcb\x9e\xc0\xf1\x48\x18\x8e\x2d\x11\xec\x66\x84\x5b\x13\xfc\x7c\x7a\x46\x9b\x61\x3a\xbe\x23\xae\xcb\xfc\xb5\x35\x39\x1e\x7b\x6f\x03\x7f\xc5\xd6\xbd\xe9\xfc\xc3\x4f\x64\x4b\xa3\x08\x6c\x1b\xa6\x7b\x11\x6c\x89\xa0\x2e\xcc\x29\x5f\x05\x7c\x4b\x7c\x87\xc2\x03\x0d\x05\x7c\xa6\xbb\x80\x0b\x69\xd4\xc1\xc9\x72\x78\x21\x88\x08\x7b\xef\xa8\x90\xe3\x0f\x4c\xfa\xe8\x8e\xfa\x9b\xe1\x69\xf5\x51\x1f\xb1\xe5\x5e\x73\x48\xf1\xef\x7b\x4a\x14\x98\x13\xda\x91\x20\x4b\x8f\x6a\x6c\x60\x19\x70\x97\xf2\xb1\x35\xb0\xe0\x99\xb9\x62\x33\xb6\xbe\x19\xb4\x72\x53\x47\x82\x17\x77\x5d\x88\x80\x70\xd3\x59\xb7\x72\xd6\x68\x73\x57\x89\xc8\xfb\x00\x37\xb9\xf7\x71\x11\x10\xb8\x1f\x1b\x4e\x21\x7a\x20\x7c\x4d\x85\x34\x88\x22\xbb\xfc\x79\x8e\x51\x89\x22\xdc\xf7\xdd\x64\xd4\x17\xae\x19\x44\x0d\xa8\x37\xb7\x06\x50\x0b\xca\x9f\x98\x43\xc3\x12\x30\x8f\xfa\x90\x4b\x41\x62\xf5\x99\x86\xbb\xc0\x0f\xa9\x4c\x45\x78\x31\x48\x67\xdc\xe2\x88\x21\x11\x38\x22\x93\x6b\x1a\x6c\xc2\x14\x08\x7c\xc7\x63\xce\xe3\xd8\xda\x30\x97\xde\xd3\x6d\xc0\x0f\x53\x9f\x78\x87\x90\x85\x9d\x6e\x99\xf6\x5f\xcd\xa5\x93\x07\xd3\x56\x2a\x7c\xba\xa9\xc4\x49\xa1\x83\x14\x1e\x86\xed\xa6\x2e\x6c\x0d\x22\x3f\xf5\xbc\xe0\x19\x4b\xf3\x17\xc2\x59\x5c\x97\x79\x8e\xc6\x83\x72\xc3\x73\x4a\x1e\xd5\xda\x99\xdd\x5f\xb0\xe3\xcc\x17\x2b\xb0\x5a\xff\xef\xbd\x59\x61\xdb\x68\x9d\xcb\x62\x03\x38\xc7\x23\x5b\x41\xef\x43\xa8\x16\x9b\xe3\x20\x20\xe9\x56\xd8\x9a\xc0\x09\xbc\x00\xe3\xbb\xe6\x94\xfa\xd6\x64\x3e\x5d\x2c\x46\x7d\x39\x80\x73\xa8\x17\xd2\x92\x19\xa7\xae\x35\xf9\x61\xfa\xe1\xd3\xc9\xc8\x77\x6b\xf9\x5b\x25\x59\x85\x5c\x3a\x42\x31\x77\x6c\x6d\x63\xb4\x18\x34\x41\xb0\x95\x56\x5a\x65\xbe\x97\xc6\xd1\x4c\x77\xab\x21\x47\x9e\x5e\x69\x54\xea\x09\xa5\xe6\x9d\x69\x54\xa9\x8b\xe1\xdd\x00\x03\x3f\x9b\xcc\x48\x48\x41\x66\x15\x54\xa4\xed\x51\x7f\x76\xa6\xae\xd1\x8d\xec\xf0\x72\xe6\xa9\x4b\xa8\xb7\x94\x1c\x48\x0a\x0c\xc5\x43\x70\x3f\xc3\x7f\x71\xa7\x17\x38\x10\x45\xf7\xb3\xb3\xae\x33\x80\xb7\x12\xe0\x72\x12\x1f\x0f\x45\x80\xcb\x66\x00\x4f\xe0\xfe\x59\x60\x43\x05\xac\x95\x95\x4a\x33\x48\x10\x53\xda\x0f\x44\x91\xd6\x51\x14\x8a\x83\x47\xc7\x56\xcc\x57\x5b\xd2\x35\xa1\xa8\xda\x43\xb9\xde\x70\x57\x0e\x9e\xce\x64\x4d\x8b\x3b\x68\x7d\x69\xd7\xd4\x76\xcc\x84\xd8\x26\xda\xb6\x9d\x94\xda\x6d\x8d\xc3\xbc\xdd\x86\x70\xa1\xb1\xc9\xec\xb0\x5a\xda\x9f\xd0\xd1\x5b\x65\x58\x2a\xa8\x12\x9c\x73\x9f\x42\x87\xb3\x9d\xa8\x4e\x7f\x22\x1c\xb2\x45\x3e\x2e\x60\x0c\xce\x4d\x6f\x4d\x11\x3e\xaa\x90\xce\xb1\x62\xef\x12\x41\xb0\xed\x69\x51\x63\x7a\xf6\x5b\x3f\xb4\xe1\x57\x53\x92\x8f\xc7\xdf\xc3\xc0\xc7\x64\x80\x25\xab\xc1\x82\x52\x89\x24\x27\xca\xde\x65\x78\xa4\xbf\x6e\xe0\x45\x52\xdf\xca\x1f\xc5\x05\x0f\x5a\x07\xbf\x55\xbe\x6a\x56\xfa\x33\x08\xb6\xa6\x6d\x52\x5f\x92\xc2\xb5\x41\xf0\x3d\x6d\xe2\x0c\xc2\xfd\x32\xce\xb6\xc9\x63\xb8\x09\x9e\x9b\xbb\x23\x2f\x2c\x34\x79\x3a\x98\x06\xe4\xe3\x91\x25\xf5\x6c\x68\x27\x75\xde\xf9\x71\xd6\x6d\x6b\x8d\x35\x8b\x6a\x3e\xad\x39\x73\x8d\xcb\xbd\xd4\x02\x41\xc2\xd5\xd1\xa4\xf0\x60\x89\x7f\xc4\x74\xcb\x4c\xcf\x31\x86\x4c\x30\xd4\x58\x86\xdc\xe6\x9f\x6a\x9e\xb3\x47\x3f\xb9\xf8\x35\xea\x7e\x5b\xb4\xba\xee\x58\xff\xcb\x2a\xc5\xea\xf6\xc8\x6e\x87\x3d\xa8\x93\x2b\x9e\x1e\xf5\xe8\x16\x1b\x4f\x69\xe6\xa8\x5f\x2e\xbe\x72\x0b\x69\xa4\xb6\x12\x91\xf9\x5f\x95\x5b\x09\x3c\x48\x45\x30\x48\x15\xfc\xef\xab\x2f\x8d\x14\xbf\xb0\x0c\x2b\x48\xa9\x54\x93\xc9\x75\xd5\xd1\x95\xd3\x60\xa9\xf8\xca\xf4\x56\x26\xb4\x62\xd9\x75\x19\xbd\x15\xaa\x80\xe8\x04\x57\x43\xb1\x95\x10\xeb\x1c\x75\x20\x39\xa4\x97\xc4\x79\x5c\xf3\x00\x2f\x4c\xf6\x27\xb6\xde\x88\x77\x9c\x1c\x8c\x52\x2c\x0b\xef\x4d\xcc\x2b\xa5\x65\xe4\x75\xb8\x5e\x2f\xe4\xf3\x92\x4c\x94\x07\x49\x4c\xb9\xce\x3d\xf3\x3c\xd6\xfd\x62\x07\xe9\x25\xfa\xab\x1d\xb4\x9e\x12\xa2\x99\x67\xaa\x3c\x6a\x1d\x1e\x8f\x9c\xf8\xa8\x58\xae\x1f\xe9\xe1\x35\x5c\x2f\xa5\xe8\xb4\xc7\x70\xad\x11\x91\xfa\xeb\xa6\xd6\xeb\x95\x72\x7d\x4d\x9e\xd6\xd2\x1b\xc3\x5b\xec\x0b\xfa\xac\xbf\xba\xc6\x18\xa0\xde\xa3\xd4\x69\x0a\x2c\x58\xe8\x89\x8b\x9f\x77\x56\xdd\x8c\x2b\x35\x87\xfe\x01\x31\x96\x81\xc9\xf6\x2a\x0d\x2f\x87\x0d\x95\xf4\x19\x0f\x07\xbb\x97\x89\xd2\xab\x72\x39\x59\x2e\xf8\xa2\x3e\x48\x02\xab\x50\x0d\xe9\x5d\x51\xec\x65\x56\xb2\xd0\xbe\xff\x2e\x7d\x85\x8a\x94\x2c\x18\x18\x2f\xcf\x57\x72\x03\xaa\x7c\x5f\x5d\x5d\x5d\x00\x66\x62\x25\x83\x63\x34\x52\x31\xbc\xc6\xfe\x92\xa4\x2d\x6d\x33\xa0\x96\x4c\x11\xd6\xc8\x65\xf4\x8f\xfd\x50\xad\xa3\x20\x69\xbb\x62\x6d\x2c\x0a\x4f\xe2\xba\xd6\xb0\xc6\x46\x37\xd4\xa8\xb7\x9d\x51\xdb\x4d\x94\x76\xa6\xb2\x97\x84\x9b\x45\x76\x79\xf1\xd2\xab\x46\x58\x4b\x4d\x9d\xba\xbc\xb8\xa4\xce\xf4\x11\x52\x61\xca\xb1\xd7\x9a\x64\xaf\x5e\x4e\x8b\xc3\x8e\xa2\x24\x44\xb8\x55\x29\x78\x69\x5d\x8c\x8b\x9a\x7c\xc5\xad\xb5\x4e\x42\x62\x2c\x59\x60\xc3\xa0\x77\xdb\x40\xcb\x19\xd6\x37\x09\x69\xa3\x88\x4e\x05\xf4\x14\x8b\x47\x76\x4c\xc8\x9d\x17\x0b\x8a\x54\x74\x43\x8d\xa2\x36\x5c\x64\x6a\x15\x72\x92\x16\x07\x19\xb3\x46\xad\xde\x36\xde\x85\x20\x31\x61\x52\x50\xe7\xa8\x90\x34\x08\x79\x94\x9a\xce\x06\x4d\x8c\x6a\x15\xb0\x14\xc0\x29\xad\x4f\xfa\xf7\x44\x74\x8d\xfc\x35\x4a\xdf\xec\x75\xc9\x27\x75\xbf\x57\x49\x7f\xf8\x3b\x00\x00\xff\xff\xef\x27\x1a\xc8\x7b\x17\x00\x00")

func reportContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportContentTmpl,
		"report/content.tmpl",
	)
}

func reportContentTmpl() (*asset, error) {
	bytes, err := reportContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/content.tmpl", size: 6011, mode: os.FileMode(420), modTime: time.Unix(1456325001, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\xaa\xad\xe5\x52\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x4e\xcd\x4b\xa9\xad\x05\x04\x00\x00\xff\xff\x70\x9a\x96\xda\x2c\x00\x00\x00")

func reportFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportFooterTmpl,
		"report/footer.tmpl",
	)
}

func reportFooterTmpl() (*asset, error) {
	bytes, err := reportFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/footer.tmpl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1455207736, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x5b\x6f\xe2\x38\x14\x7e\xe7\x57\x78\xb2\x2f\x1d\x69\x9d\x0b\xa1\x0c\x61\x29\x52\x3b\x45\xdb\x4a\xdd\x9d\x6a\xcb\x4b\x9f\x56\x4e\x7c\x4c\xcc\x24\x76\xd6\x36\x74\x18\xc4\x7f\x5f\x27\x74\x85\x12\xd2\x16\x7a\x91\xd6\x52\xa4\x38\x3e\xfe\xbe\xef\x5c\x72\xe2\xac\xd7\x14\x18\x17\x80\x9c\x14\x08\x05\xe5\x6c\x36\x9d\xd1\xa7\xcb\x6f\x5f\xa7\xf7\xb7\x13\x94\x9a\x3c\x1b\x77\x3a\xc8\x8e\xd1\xd5\xe4\xfc\x72\x5c\xdd\x56\xd3\xe9\xf5\xf4\x66\x32\x5e\xaf\xdd\xaf\x52\x30\x3e\x73\xcf\x6f\xaf\xff\x24\x39\x6c\x36\xe8\x7c\x61\x64\x4e\x0c\x50\x74\x0b\x8a\x49\x95\x13\x91\x00\x9a\x82\x36\xe8\x2f\x28\xa4\x32\x23\x6f\xbb\xb9\xd3\xd9\xc1\xe9\x44\xf1\xc2\x20\xad\x92\x33\x27\x35\xa6\x18\x7a\x5e\x12\xce\xb5\x2b\xd5\xcc\x9b\x6b\x6f\xfe\xcf\x02\xd4\x0a\x07\x6e\x10\xb8\xbe\x9b\x73\x81\xa3\xc0\xf7\xfb\x7d\x16\xbb\x73\xed\x20\xb3\x2a\xe0\xcc\x31\xf0\xc3\x78\x73\xb2\x24\x5b\x30\x67\x3c\xf2\xb6\x77\xe3\x83\x79\x68\x88\x43\xf7\xf4\x91\x22\x8c\x4f\xfb\xbd\x30\xea\xbe\x2f\x45\x12\x56\xe0\x41\x37\x0a\xba\x2c\xee\x1f\x09\xfe\x09\xe3\x97\x08\x98\x5c\x08\x4a\x0c\x97\x62\x4b\x44\x19\x0c\x82\xc0\x3f\x88\x08\xe3\xe3\xb8\x52\x3e\x4b\x33\x7b\x19\xb7\x20\xc9\x77\xdc\x23\xec\xd4\xf7\x7b\xf4\x43\xb8\x96\x20\xa8\x54\x5e\x2e\x6d\x99\x0a\xfe\x53\xe1\xae\xdb\x77\x83\xca\xc7\xfe\x80\xd1\x24\x89\xa2\x83\x79\x77\xc4\x19\x17\xdf\x51\xaa\x80\xed\x73\x26\x5a\x7b\xa2\xac\xdf\x8c\xff\x04\x0c\xbd\xfe\x69\x12\x0f\xfa\xae\x7d\xec\xa0\x1c\x28\x27\x67\x8e\x85\x04\x10\x0e\x52\x90\xd9\x89\x59\x65\xa0\x53\x00\x53\x13\x51\xd9\x7b\xe3\x83\x29\x1b\xf9\x8b\xbe\x0c\x68\x2f\x81\xc1\x87\xf3\x26\x21\x8e\xfd\x30\xe8\x9e\x32\xf2\xe1\x5c\x15\x0c\x8e\x22\x16\x0f\xa2\x41\xf4\x76\xba\xb2\x7c\x5e\xa2\x24\x79\x61\xb1\xbc\x24\x25\xca\xfc\xad\x0b\x6b\x0e\x98\x92\x30\x22\x21\xc0\x6b\x15\xec\xd5\xf0\x0b\x22\x6c\x67\x94\x4a\xc9\x07\x4c\xbf\x24\xcc\x8f\xba\xc1\x5b\x88\x77\xcc\x77\xd3\xfb\x9b\x49\xd3\x6a\xa7\xac\x1c\x17\xdf\x2e\xef\xd1\xba\xf6\xa8\x1c\xb1\x7d\x6d\x67\xaa\xac\xb8\x21\x7a\x48\xb9\x81\xdf\xf6\x4c\x12\x99\x49\x35\x44\x71\x66\x4d\x6b\x8b\x9b\x4e\x6d\xea\x1a\x59\x5c\x10\xb5\xcf\x51\x10\x4a\xb9\x98\x61\xbb\x3e\x44\x38\xf0\x8b\x1f\xfb\x24\x3b\x1d\xf8\x91\xef\xa6\x6c\x2b\x77\x99\xfd\x90\xfc\xae\xc8\xaa\x65\x87\x54\xb6\x11\xe0\x2a\x4c\x43\x64\xf7\xca\x65\x43\x7c\x43\x5f\x1a\xb8\x8f\x4a\x5a\xe2\xf0\x9f\xc6\x0c\x98\x19\xa2\x41\xab\x46\x26\x85\x5d\x0b\xed\x1a\x22\x8a\x93\xec\x57\xa4\x89\xd0\x58\x83\xe2\xec\xc9\xb0\x3d\x11\xd4\x32\x4b\x58\xa7\x84\xca\x87\x21\x0a\x2c\x62\x79\x55\x2e\xef\x7b\xdb\xf4\x23\x7c\xa3\x1f\xef\xa9\xac\x26\xac\xff\x3f\x12\x56\x2f\x4d\xca\x97\x57\xf6\x7c\x63\x05\x3c\xf7\x0a\xd4\x4a\xef\x22\x5b\xb4\x88\xa8\x57\x9d\x90\xe2\xf9\x9a\x73\x0d\x89\x33\xb8\x7d\x75\x54\x1a\x70\xbf\xe4\x60\xfb\xc7\xca\x1e\xb9\x0c\xb1\xed\x4b\xb5\x20\xa6\x50\x8a\x1f\xf6\xfc\xe7\xb0\x46\x5e\xd5\x31\xf6\x0e\x2d\xf5\x96\xb1\x24\x0a\x71\xfd\x47\x45\x79\x2e\x48\xb6\xd2\x5c\x5f\x71\x4a\x41\xa0\x33\xc4\x48\xa6\x1b\xbe\xb3\x85\x48\xca\xcf\x16\x4a\x39\x85\xfa\xb6\x93\xcf\xfb\x4a\x39\x3b\x69\x47\x6f\xb1\x2d\x07\x95\xc9\x22\x07\x61\xdc\x19\x98\x49\x06\xe5\xed\xc5\xea\x9a\x9e\x38\x8d\xa0\x38\x9f\xdd\x2a\x3d\x36\xe9\xb6\xcb\x93\x95\x15\xeb\x70\x51\xb6\x7b\x67\x3f\x9f\x95\x90\x23\x7c\xac\x02\x09\xf6\xf1\xfb\x6b\x2c\x8b\xe9\x58\x85\x46\xb5\x15\x69\xa3\x6a\x1a\xd3\x6d\x5a\xef\x40\x2d\x79\x02\x47\xe7\xb5\xb1\xef\xc9\xc4\xb6\xe2\x1f\x9b\x59\xbd\x05\x79\x4b\x6a\x8f\xf0\xb3\x8a\xd5\x2b\x72\x7b\x88\xca\x67\x93\xfb\x94\xc6\x63\xb3\xbb\xfb\x5f\xd8\xfe\xb2\x79\xdb\x7f\xb6\xed\x24\x96\x74\x35\xee\xac\xd7\xf6\x14\xbd\xd9\xfc\x1b\x00\x00\xff\xff\x71\xac\x47\x54\xf7\x0d\x00\x00")

func reportHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportHeaderTmpl,
		"report/header.tmpl",
	)
}

func reportHeaderTmpl() (*asset, error) {
	bytes, err := reportHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/header.tmpl", size: 3575, mode: os.FileMode(420), modTime: time.Unix(1455207736, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportTestTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x5d\x6f\xe2\x38\x14\x7d\xef\xaf\xf0\x64\x5f\x3a\xd2\x3a\x1f\x04\x18\xc2\x52\xa4\x76\x8a\xb6\x95\xba\x3b\xd5\x96\x97\x3e\xad\x1c\xfb\x9a\x98\x49\xec\xac\x6d\xe8\x30\x55\xff\xfb\x3a\xa1\x2b\x94\x40\x5b\xe8\x87\xb4\x96\x90\xe2\xd8\x3e\xe7\xdc\x7b\x2e\x37\xc9\xe8\xd3\xf9\xb7\xaf\xd3\xdb\xeb\x09\xca\x6c\x91\x8f\x8f\x8e\x90\x1b\xa3\x8b\xc9\xe9\xf9\xb8\xbe\xac\xa7\xd3\xcb\xe9\xd5\x64\x7c\x7f\xef\x7f\x55\x92\x8b\x99\x7f\x7a\x7d\xf9\x27\x29\xe0\xe1\x01\x9d\x2e\xac\x2a\x88\x05\x86\xae\x41\x73\xa5\x0b\x22\x29\xa0\x29\x18\x8b\xfe\x82\x52\x69\x3b\x0a\xd6\x87\x8f\x8e\x36\x70\x86\x6a\x51\x5a\x64\x34\x3d\xf1\x32\x6b\xcb\x61\x10\xd0\x78\x6e\x7c\xa5\x67\xc1\xdc\x04\xf3\x7f\x16\xa0\x57\x38\xf2\xa3\xc8\x0f\xfd\x42\x48\x9c\x44\x61\xd8\xef\xf3\xd4\x9f\x1b\x0f\xd9\x55\x09\x27\x9e\x85\x1f\x36\x98\x93\x25\x59\x83\x79\xe3\x51\xb0\xbe\x1a\xef\xcd\xc3\x62\x1c\xfb\xbd\x47\x8a\x38\xed\xf5\xbb\x71\xd2\x79\x5f\x0a\x1a\xd7\xe0\x51\x27\x89\x3a\x3c\xed\x1f\x08\xfe\x09\xe3\x97\x08\xb8\x5a\x48\x46\xac\x50\x72\x4d\xc4\x38\x0c\xa2\x28\xdc\x8b\x08\xe3\xc3\xb8\x32\x31\xcb\x72\xf7\xb3\x7e\x49\xe8\x77\xdc\x25\xbc\x17\x86\x5d\xf6\x21\x5c\x4b\x90\x4c\xe9\xa0\x50\x0c\xb4\x14\x3f\x35\xee\xf8\x7d\x3f\xaa\x63\xec\x0f\x38\xa3\x34\x49\xf6\xe6\xdd\x10\xe7\x42\x7e\x47\x99\x06\xbe\xcd\x49\x8d\x09\x64\x55\xbf\xb9\xf8\x09\x18\xba\xfd\x1e\x4d\x07\x7d\xdf\xdd\xf6\x50\x01\x4c\x90\x13\xcf\x41\x02\x48\x0f\x69\xc8\xdd\xc4\xae\x72\x30\x19\x80\x6d\x88\xa8\xf7\x07\xe3\xbd\x29\x5b\xfe\x25\x5f\x06\xac\x4b\x61\xf0\xe1\xbc\x34\xc6\x69\x18\x47\x9d\x1e\x27\x1f\xce\x55\xc3\xe0\x24\xe1\xe9\x20\x19\x24\x6f\xa7\xab\xca\xe7\x25\x4a\x52\x94\x0e\x2b\xa0\x19\xd1\xf6\x6f\x53\xba\xed\x80\x19\x89\x13\x12\x03\xbc\x56\xc1\x56\x0d\xbf\x20\xc2\x75\x46\xa5\xb5\xba\xc3\xec\x0b\xe5\x61\xd2\x89\xde\x42\xbc\x61\xbe\x99\xde\x5e\x4d\xda\xbb\x36\xca\xaa\x71\xf6\xed\xfc\x16\xdd\x37\x6e\x55\x23\x75\x7f\xdb\x99\xae\x2a\x6e\x88\xee\x32\x61\xe1\xb7\xad\x2d\x54\xe5\x4a\x0f\x51\x9a\xbb\xad\x8d\xc5\x87\xa3\xc6\xd4\xb7\xaa\x3c\x23\x7a\x9b\xa3\x24\x8c\x09\x39\xc3\x6e\x7d\x88\x70\x14\x96\x3f\xb6\x49\x36\x3a\xf0\x23\xdf\x55\xd5\x56\x6e\x72\xf7\x20\xf9\x5d\x93\xd5\x8e\x13\x4a\xbb\x46\x80\xeb\x34\x0d\x91\x3b\xab\x96\x2d\xf1\x2d\x7d\x59\xe4\x3f\x2a\xd9\x91\x87\xff\x34\xe6\xc0\xed\x10\x0d\x76\x6a\xe4\x4a\xba\xb5\xd8\xad\x21\xa2\x05\xc9\x7f\x45\x86\x48\x83\x0d\x68\xc1\x9f\x4c\xdb\x13\x49\xad\x5c\xc2\x26\x23\x4c\xdd\x0d\x51\xe4\x10\xab\x5f\x1d\xf2\x76\xb4\xed\x38\xe2\x37\xc6\xf1\x9e\xca\x1a\xc2\xfa\xff\x23\x61\xcd\xd2\x64\x62\x79\x01\xa4\x12\xf0\xdc\x5f\xa0\x51\x7a\x67\xf9\x62\x87\x88\x66\xd5\x49\x25\x9f\xaf\x39\xdf\x92\x34\x87\xeb\x57\x67\xa5\x05\xf7\x4b\x01\xae\x7f\xac\xdc\x2b\x97\x25\xae\x7d\xe9\x1d\x88\x19\x54\xe2\x87\xdd\xf0\x39\xac\x51\x50\x77\x8c\xad\x97\x96\x66\xcb\x58\x12\x8d\x84\xf9\xa3\xa6\x3c\x95\x24\x5f\x19\x61\x2e\x04\x63\x20\xd1\x09\xe2\x24\x37\xad\xd8\xf9\x42\xd2\xea\xb1\x85\x32\xc1\xa0\x79\xec\xf8\xf3\xb6\x52\xc1\x8f\x77\xa3\xef\xd8\x5b\x0d\xa6\xe8\xa2\x00\x69\xfd\x19\xd8\x49\x0e\xd5\xe5\xd9\xea\x92\x1d\x7b\xad\xa4\x78\x9f\xfd\xda\x1e\x67\xba\xeb\xf2\x64\xe5\xc4\x7a\x42\x56\xed\xde\xdb\xf6\xb3\x16\x72\x40\x8c\x75\x22\xc1\xdd\x7e\x7f\x8d\x55\x31\x1d\xaa\xd0\xea\x5d\x45\xda\xaa\x9a\xd6\x74\x6d\xeb\x0d\xe8\xa5\xa0\x70\xb0\xaf\xad\x73\x4f\x1a\xbb\x13\xff\x50\x67\xcd\x1a\xe4\x2d\xd6\x1e\x10\x67\x9d\xab\x57\x78\xbb\x8f\xca\x67\xcd\x7d\x4a\xe3\xa1\xee\x6e\xbe\x17\xd6\x9f\x6c\xc1\xfa\x9b\x6d\x3d\x49\x15\x5b\x8d\xff\x0d\x00\x00\xff\xff\x1f\x48\x7c\x53\xdb\x0d\x00\x00")

func reportTestTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportTestTmpl,
		"report/test.tmpl",
	)
}

func reportTestTmpl() (*asset, error) {
	bytes, err := reportTestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/test.tmpl", size: 3547, mode: os.FileMode(420), modTime: time.Unix(1455207736, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"report/content.tmpl": reportContentTmpl,
	"report/footer.tmpl":  reportFooterTmpl,
	"report/header.tmpl":  reportHeaderTmpl,
	"report/test.tmpl":    reportTestTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"report": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{reportContentTmpl, map[string]*bintree{}},
		"footer.tmpl":  &bintree{reportFooterTmpl, map[string]*bintree{}},
		"header.tmpl":  &bintree{reportHeaderTmpl, map[string]*bintree{}},
		"test.tmpl":    &bintree{reportTestTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
