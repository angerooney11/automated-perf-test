// Code generated by go-bindata.
// sources:
// report/content.tmpl
// report/footer.tmpl
// report/header.tmpl
// report/test.tmpl
// DO NOT EDIT!

package perfTestUtils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _reportContentTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x58\xdf\x6f\xdb\xb8\x0f\x7f\xce\xfe\x0a\xc2\xdf\x16\x6d\x81\x2d\x69\xd7\xb5\xc0\xd7\x73\x02\xa4\xbd\xdd\xd6\xdd\xba\x0b\x96\xde\x5e\x86\x3d\x28\x36\x9b\xe8\x6a\x4b\x39\x49\x49\x9b\x65\xfe\xdf\x0f\xf2\x6f\x3b\x92\x93\x6e\x2b\xce\x40\x1e\x62\x91\x14\x45\x7e\x48\xf1\xe3\xf5\x3a\xc0\x5b\xca\x10\x1c\x9f\x33\x85\x4c\x39\x71\xfc\x0c\xc0\x0b\xe8\x12\xfc\x90\x48\xd9\x77\x14\x9f\x5f\x10\xe1\x0c\x9e\x41\xe5\xf1\x66\x27\xf9\xfa\x9c\x04\x01\x65\x53\x67\xb0\x5e\x77\x2f\x39\xbb\xa5\xd3\xee\x70\x74\xf5\x91\x44\x18\xc7\xe0\xba\x30\x5c\x28\x1e\x11\x85\x01\x8c\x50\xdc\x72\x11\x11\xe6\x23\xdc\xa0\x54\xf0\x09\xe7\x5c\x28\x2d\x74\xb8\x5e\x77\xf5\xf2\x58\x11\x25\xbb\x6f\x51\xe9\xf5\x1b\x1a\xe1\x58\x11\xa1\xe2\x18\x14\x07\x9b\xc8\x1b\x16\xc4\xf1\x91\xd7\x9b\x9d\x94\x3e\x7a\xbd\x80\x2e\x2b\x7f\x2b\xe7\x09\xe8\xf2\x1d\x92\xd4\xe5\xf2\x4c\x9e\x22\x93\x10\x0d\x32\x30\xe1\x22\x40\xd1\x77\x8e\x1d\xb8\xa7\x81\x9a\xf5\x9d\xff\x1f\xef\x57\x54\x3d\x25\xea\xb1\xa9\xc5\x49\x05\xb9\xd6\x99\xd6\xf2\x66\xe7\x1b\x71\x7b\xc7\xa5\x82\x05\x0b\x50\x80\x42\xa9\x5c\x28\x03\x79\x43\xc4\x14\x95\x16\x88\x63\xb7\xf9\x7a\xc4\x75\x64\xbc\xde\xec\x7c\xe0\xf5\x54\x60\x77\xa2\xc5\xa9\x97\x67\x16\xa7\xc6\x28\x96\xd4\x47\xd9\x70\x2c\x44\x06\x95\x2c\x64\x52\x9f\x50\xce\x39\x93\xa8\xb3\x21\x9f\xcc\xa5\x2d\x66\xbd\x9e\x2d\x11\x5e\x2f\x49\xae\x6d\x71\x17\xa4\x00\x67\x7e\x48\xfd\xbb\xbe\x33\xa3\x01\x5e\x63\xc4\xc5\x6a\xc8\x48\xb8\x92\x54\x1e\x1e\x35\x8b\xe3\x87\xb1\x54\x5a\xb0\x1d\x65\x03\x4f\xa7\x1b\x71\x4a\xbd\x83\xdc\x3d\xaf\x37\x3b\x6d\x0b\xdb\xf6\xc8\x83\x54\xab\x10\xfb\xce\xfd\x8c\x2a\x7c\x21\xe7\xc4\x47\x97\xf1\x7b\x41\xe6\xce\x60\x18\x86\xfc\x1e\x03\xf8\x4c\x04\x4d\x0a\xbb\x0a\xdf\x64\x51\xc7\x62\x84\xe4\x2e\x75\xab\x90\xfb\x0e\x73\x41\x99\xba\x05\x67\xff\x55\xf7\xe5\xad\x13\xc7\xfb\xdb\x12\xbc\x03\x46\xd6\x6b\x7a\x0b\xdd\x2b\x99\x6e\x36\x22\x52\x42\x1c\x7b\xb7\x9c\x29\xf0\x79\xc8\x45\xdf\x99\x0a\x44\xe6\x0c\x46\xc3\xf1\xd8\xeb\xe9\x85\xc1\x7a\x8d\xa1\xc4\x86\x98\xc0\xc0\x19\xfc\x3e\xbc\xfa\x50\x0a\xe9\x36\xd3\xe2\xe2\x26\xfe\x36\x70\x67\xc2\x1a\x0d\xfa\x4e\x94\x78\x7b\xc9\x99\x22\x94\xe1\x46\xaf\xad\x36\xe3\x24\x9a\xf9\x69\x0d\xb8\xa9\x22\xaf\xc8\x5f\x2b\xd6\x5a\xf1\x96\xc7\x3d\x37\x71\x72\x7e\xec\x0c\xbc\x8b\xc1\x05\x91\x08\x3a\xab\x90\x46\xda\xf5\x7a\x17\x5b\x4a\xde\x53\x81\xbe\x22\xb4\x66\xd9\x40\xd2\x7f\x39\x38\xe0\x3b\x44\x18\xdd\xf0\xeb\x0b\xf8\x0e\xc9\x55\xa1\xae\x31\x8a\xe3\xeb\x8b\xad\xa6\x0b\x07\xcf\xb4\x83\x93\x41\x72\xbf\xd4\x1d\x9c\xec\xe6\x60\xe9\xdc\xaf\x75\xec\x24\x75\x6c\xbf\x28\x95\xdd\x5c\x82\x04\xd2\x8c\xab\x3a\xac\xe3\x38\x2b\xca\x04\xaf\xae\x86\x6b\x06\xd1\xf4\x0c\xcd\x7a\x1b\xa1\xf0\x91\x29\x32\xc5\xfa\x09\xf6\x1f\xdb\x50\x8d\xcd\x34\x03\xb6\x0d\xb6\x07\x7e\x0e\xed\x03\x83\xc1\xaa\xdc\x8c\x08\x65\x90\x81\x4a\xb5\x1c\x7c\xa0\x0c\x2f\x53\xc1\x46\x41\x35\xdc\xd9\xf6\x4a\xfa\x82\xce\xd5\xa6\xfa\x92\x08\x28\x36\x79\x3f\x86\x3e\xf8\xa7\xdd\x29\x32\x14\x44\xe1\xe1\x7a\x43\x3e\x20\x8a\xb8\xb0\xf9\x5e\x3f\x3e\x0f\x17\x11\x93\x2e\x7c\xb1\x25\x79\xbd\xfe\x5b\x72\x76\x8d\x11\x38\xba\x1a\x1c\x68\x94\x48\x76\xd9\x2c\x02\xaa\xe2\xf8\xf9\x0e\x56\x34\xf4\x9d\xea\x2d\x5d\xb3\x60\x34\xf0\x75\xe3\xad\x61\xa7\x6f\x9c\x47\xb6\x63\x22\xd3\xa0\x08\x5c\x50\x62\x81\xbb\x18\x03\xb9\x98\x24\xd9\xb6\x59\x94\x33\x7e\xbf\xbb\x39\xf2\x40\xa5\xcd\xd2\xca\xb6\xa0\x9f\x90\x4c\x30\x74\xe1\x20\xab\xf3\xc3\x3f\x2e\x8e\x0e\x8c\xc2\x86\x4d\x0d\xaf\xa6\x82\x06\xd6\xed\x1e\x5a\x1d\xa1\x0c\xdb\x60\x52\x7b\xd6\xeb\xee\x7b\xc9\x99\xce\xf4\x88\x08\x45\x15\xe5\x4c\x5a\x72\x5b\x7d\x36\xf3\x5c\x3c\x66\xe5\xfa\xdb\xf8\xe8\x75\x5d\x6a\xef\xd0\xf9\x5f\x51\x29\xce\x51\x97\xcc\xe7\xc8\x82\xc3\x4a\xf1\x74\x31\xc4\x08\x99\x6a\x68\x7a\xbd\x66\xf1\x35\x5b\xc8\x4e\x83\x58\x36\x7f\xfe\x47\x93\x98\x71\xfa\xca\x5c\x82\x7c\x26\x06\x3d\x14\x3f\x62\x18\x7b\x9a\x01\xcc\x30\xa8\xff\xdc\x24\x66\x9e\xd0\xab\x13\x54\x3e\x8a\xe9\xbd\xd2\x1b\xab\x32\x7a\xe5\x33\x57\x31\x66\x15\xf3\x55\x32\x6d\x3d\xcd\x98\x25\xd3\x20\x98\xe6\xac\x1d\x67\xac\x0c\x4f\x35\xc4\x74\x3a\x9d\x4e\x72\x56\xfc\x07\xba\xba\x22\xc7\x4a\xdf\x13\xd3\x15\x38\xe3\x05\x55\xa8\xbb\x79\xa0\x69\xb5\x16\xec\x78\x4a\xe4\xd9\x9c\x10\xff\x6e\x2a\xf8\x82\x05\xee\x07\x3a\x9d\xa9\xb7\x82\xac\x5e\x83\xc2\x07\xf5\x82\x84\x74\xca\x5c\xa1\xdf\x66\x3b\x68\xcd\x40\x87\x56\xce\x09\xeb\x3b\xaf\x0a\x4c\xe8\x78\xbd\x90\xf4\x1b\xba\x32\x22\x61\x88\xe2\x35\x98\x60\xf2\xe7\x12\xc5\x30\x0c\xe1\x92\x2f\x98\x92\x6e\x1a\xdb\xd2\xf0\xe3\x8c\xdd\x08\xc2\x24\xf1\x93\xae\x03\x5f\x6a\x33\x53\xb6\x4f\x22\x91\xec\x15\xc7\x5f\x7f\x6e\xb3\x37\x42\x70\x61\xd9\x26\x59\xfb\x35\xdb\xdc\x8c\xc6\x96\xa3\x8c\xc6\x86\x12\xa9\xee\x96\x42\x32\xc5\x41\x82\x62\x53\x17\x69\xcb\xba\x75\x2a\x6f\x10\x9e\x74\xac\xfd\x48\x22\x6c\x1f\x1d\xab\x63\xe7\x69\xaa\xa8\x51\x98\x74\xa2\xc3\x6b\x1a\x86\xf4\xe8\xd1\x06\xf2\xaf\x2d\x3f\x6c\x60\x7f\x99\x35\x9c\x52\xb3\xb3\x7b\xed\x6c\xdb\xe4\x65\xe6\x65\x81\xbb\xba\x7f\x1b\xfa\x06\xdd\x12\x4c\x0d\x0f\x3b\xa6\x8d\x46\xe3\x8d\x73\xa4\xb9\xb7\x74\xac\x0c\x1f\x82\xb0\x29\xc2\xde\x1d\xae\x9e\xc3\xde\x44\xb3\x28\xb7\x0f\x7b\x06\x56\x64\xfe\xb4\x92\x6f\xb5\x47\x96\x53\xad\x49\x59\x80\x0f\xb0\xb7\xe5\x93\x4c\xb2\x5f\x45\x59\xcd\x65\xab\xb2\x86\x7c\x53\x45\xf8\xed\x2a\x45\xe0\x9b\x9a\xb8\x45\xb3\x0c\xfb\xcf\xbb\xa9\x99\x52\x1a\x5d\x70\x92\x2f\x87\x7f\xcd\x8b\xce\x9b\xb4\xde\x19\xea\x9a\xeb\x9f\x1c\xcf\x1f\xf2\xe4\x76\x52\xde\x97\x1a\xaa\x66\x3d\x5b\xd0\x37\x43\x9a\xa9\x13\x3c\xaf\x93\x27\x9b\xb4\x4e\x4e\xbb\x70\x0e\xfa\x44\xf4\xb8\x70\xb1\xd6\xb8\x4a\x66\x97\xdc\x90\x6f\x7e\x6b\x58\x48\x6f\xd0\x9a\x66\x62\x76\xaf\x7b\x25\xf3\x08\x65\x77\x6f\x16\xa6\x5c\xa7\x85\x3a\x92\xe5\xf4\x33\x11\xa9\x5f\xe9\xa9\x8d\xe3\x41\xdd\x91\x04\xf7\xcd\x93\x6d\xbf\x0b\xcb\xd8\x2b\xe1\x37\x02\x94\xaf\xa0\x75\x45\xa3\x63\xd3\xb7\x16\xd7\xca\x36\x5d\x5b\x30\xf5\xec\x9d\x46\x8a\x2d\xdc\x76\x17\x5e\x5b\x70\xda\x09\x11\x76\x4a\xdb\xdc\xbc\xf1\xd7\x40\x63\x35\x83\xcd\x4d\x3e\x39\x81\x2d\xd8\x08\x8d\x70\x28\x04\x59\xd9\x48\xa6\x99\xbc\xaa\xd5\x1c\x5d\xd0\x11\xd8\x24\x5e\x4f\xcd\x42\x27\x44\xd8\x6c\x25\xfd\xbe\x8d\xb0\x09\xa2\x28\x77\xe1\xb8\x7b\xb6\x03\x73\xb2\xec\x6f\xa3\xad\x56\xca\x9a\xd3\xd5\xe1\x72\x9a\x30\x0c\xa8\x5c\xc9\x63\xf4\x39\x0b\xa4\x81\xbf\x5a\x3e\x1b\xb4\xf2\xd1\x2c\x2d\xbe\x2e\x5f\x2e\x56\x07\xd6\x2f\x0f\x90\x89\x50\x4d\x5f\x2b\x50\xc8\x5a\x90\x9e\x56\x6c\xd4\xd4\x10\xa3\x56\xbe\xa9\xe9\x66\x0e\xeb\x92\x6d\x96\x40\x37\x90\x4d\x2b\xd1\x2c\xfe\x4e\xc4\xa0\xed\xf7\x2c\xeb\x0f\xff\x06\x00\x00\xff\xff\x52\x14\x17\x0f\x2a\x1b\x00\x00")

func reportContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportContentTmpl,
		"report/content.tmpl",
	)
}

func reportContentTmpl() (*asset, error) {
	bytes, err := reportContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/content.tmpl", size: 6954, mode: os.FileMode(420), modTime: time.Unix(1497030894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\xaa\xad\xe5\x52\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x4e\xcd\x4b\xa9\xad\x05\x04\x00\x00\xff\xff\x70\x9a\x96\xda\x2c\x00\x00\x00")

func reportFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportFooterTmpl,
		"report/footer.tmpl",
	)
}

func reportFooterTmpl() (*asset, error) {
	bytes, err := reportFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/footer.tmpl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1493141754, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x97\x5d\x6f\xe2\x38\x17\xc7\xaf\x87\x4f\xe1\xc9\x73\xd3\x91\x1e\xe7\xa5\x01\x26\x61\x01\xa9\x6f\xda\x56\xea\xee\x54\xdb\xde\x54\x5a\x69\xe5\xd8\xc7\xc4\xad\x63\x67\x6d\x43\xcb\x20\xbe\xfb\x2a\xa1\x2b\x94\x40\x5b\xe8\x8b\xb4\x91\x90\x62\x38\x3e\xff\xdf\x39\xff\x83\x21\x8b\x05\x03\x2e\x14\x20\x2f\x07\xc2\xc0\x78\xcb\x65\x67\xf8\xf5\xf4\xc7\xc9\xcd\xed\xd5\x19\xca\x5d\x21\xc7\x9d\x0e\x42\x08\x0d\xcf\xcf\x8e\x4e\xc7\x9d\x2f\x5f\x86\x05\x38\x82\x68\x4e\x8c\x05\x37\xf2\xa6\x8e\xe3\xc4\xfb\x73\x5c\x07\xd5\x81\x37\x17\x37\x97\x67\xe3\xc5\xc2\x3f\xd1\x8a\x8b\x89\x7f\x74\x75\xf1\x3b\x29\x60\xb9\x44\x47\x53\xa7\x0b\xe2\x80\xa1\x2b\x30\x5c\x9b\x82\x28\x0a\xe8\x06\xac\x43\x7f\x40\xa9\x8d\x1b\x06\xab\xcd\x9d\xce\x3a\x9d\xa5\x46\x94\x0e\x59\x43\x47\x5e\xee\x5c\x39\x08\x02\x1a\xdf\x59\x5f\x9b\x49\x70\x67\x83\xbb\xbf\xa7\x60\xe6\x38\xf2\xa3\xc8\x0f\xfd\x42\x28\x9c\x46\x61\xd8\xef\xf3\xcc\xbf\xb3\x1e\x72\xf3\x12\x46\x9e\x83\x47\x17\xdc\x91\x19\x59\x25\xf3\xc6\xc3\x60\x75\x37\xde\x59\x87\xc5\x38\xf6\x7b\x4f\x12\x71\xd6\xeb\x77\xe3\xf4\xf0\x63\x25\x68\x5c\x27\xef\xd2\x5e\x06\x3c\xe1\x7b\x26\xff\x8a\xf1\x6b\x02\x5c\x4f\x15\x23\x4e\x68\x55\x0b\x45\x8c\x43\x12\x45\xe1\x4e\x42\x18\xef\xa7\x95\x8b\x49\x2e\xc5\x24\x77\x7e\x49\xe8\x3d\xee\x12\xde\x0b\xc3\x2e\xfb\x14\xad\x19\x28\xa6\x4d\x50\x68\x06\x46\x89\x9f\x06\x1f\xfa\x7d\x3f\xaa\x6b\xec\x27\x9c\x51\x9a\xa6\x3b\xeb\xae\x85\xa5\x50\xf7\x28\x37\xc0\x37\x35\xa9\xb5\x81\xaa\xe6\x57\x8a\x9f\x80\xa1\xdb\xef\xd1\x2c\xe9\xfb\xd4\x5a\x0f\x15\xc0\x04\x19\x79\x96\x1a\x00\xe5\x21\x03\x72\xe4\x59\x37\x97\x60\x73\x00\xd7\x80\xa8\xe3\x83\xf1\xce\x92\x2d\xff\xd2\xef\x09\xeb\x52\x48\x3e\x5d\x97\xc6\x38\x0b\xe3\xe8\xb0\xc7\xc9\xa7\x6b\xd5\x69\x70\x9a\xf2\x2c\x49\x93\xf4\xfd\x72\xd5\xf8\xbc\x26\x49\x8a\x52\x82\x0d\xaa\x33\xcd\xfd\x65\x4b\x29\x14\x60\x46\xe2\x94\xc4\x00\x6f\x25\xd8\x98\xe1\x57\x20\x9c\x2e\xb4\x31\xfa\x01\xb3\xef\x94\x87\xe9\x61\xf4\x1e\xe1\xb5\xf2\xf5\xcd\xed\xe5\x59\x3b\x6a\x4d\x56\x5d\xc7\x3f\x4e\x6f\xd1\xa2\xf1\x56\x75\x65\x84\xde\x4f\x4c\x35\x71\x03\xf4\x90\x0b\x07\xbf\x6c\x84\x50\x2d\xb5\x19\xa0\x4c\x12\x7a\xdf\xf8\x70\xd9\x69\x2c\x7d\xa7\xcb\x63\x62\x36\x35\x4a\xc2\x98\x50\x13\xec\x74\x39\x40\x38\x0a\xcb\xc7\x4d\x91\x35\x07\x7e\xd2\xbb\xac\x8e\x95\x6b\x49\x1c\xfc\x6a\xc8\x7c\xcb\x0e\x6d\x18\x18\x5c\xb7\x69\x80\x26\x46\xeb\x59\x0b\xbe\xc5\x97\x47\xfe\x13\xc9\x96\x3e\xfc\xcb\x28\x81\xbb\x01\x4a\xb6\x32\x72\xad\xdc\x00\xc5\x61\xf9\x88\x88\x11\x44\xfe\x1f\x59\xa2\x2c\xb6\x60\x04\x7f\xb6\x6d\xcf\x34\xb5\x72\x09\xdb\x9c\x30\xfd\x30\x40\x51\xf9\x58\xbf\xea\x92\x37\xab\x6d\xd7\x11\xbf\xb3\x8e\x8f\x24\x6b\x80\xf5\xff\x43\x60\xcd\xd1\x64\x62\x76\x0e\xa4\x02\x78\xe9\x2b\xd0\x18\xbd\x63\x39\xdd\x02\xd1\x9c\x3a\xa5\xd5\xcb\x33\xe7\x3b\x92\x49\xb8\x7a\x73\x57\x5a\xe9\xfe\x57\x40\xa1\xcd\xfc\x44\x2b\x47\x84\x02\xb3\x25\x63\x0e\x15\xfc\xa0\x1b\xbe\x94\x6b\x18\xd4\x27\xc6\xc6\x9f\x96\xe6\x91\x31\x23\x06\x09\xfb\x5b\x2d\x79\xa4\x88\x9c\x5b\x61\xcf\x05\x63\xa0\xd0\x08\x71\x22\x6d\xab\x76\x3e\x55\xb4\xfa\xd9\x42\xb9\x60\xd0\xdc\x76\xf0\x6d\x93\x54\xf0\x83\xed\xd9\xb7\xc4\x56\x17\xd3\x74\x5a\x80\x72\xfe\x04\xdc\x99\x84\xea\xf6\x78\x7e\xc1\x0e\xbc\x56\x53\xbc\x6f\x7e\x6d\x8f\xcf\x84\x2d\x25\x99\xa3\x11\xf2\x84\xaa\x8e\x7b\x6f\xd3\xcf\x1a\x64\x8f\x1a\xeb\x46\x82\xb4\xf0\xf1\x8c\xd5\x30\xed\x4b\xe8\xcc\xb6\x21\x6d\x4d\x4d\x6b\xb9\xb2\xf5\x1a\xcc\x4c\x50\xd8\xdb\xd7\xd6\xbe\x67\x8d\xdd\x9a\x7f\x5f\x67\xed\x2a\xc9\x7b\xac\xdd\xa3\x4e\xf4\x46\x6f\x77\xa1\x7c\xd1\xdc\xe7\x18\xf7\x75\xb7\xf9\xbc\x30\x0c\x56\x0f\x73\xab\x45\xa6\xd9\x7c\xdc\x59\x2c\x40\xb1\xe5\xf2\x9f\x00\x00\x00\xff\xff\xfa\x02\x30\xe2\x10\x0e\x00\x00")

func reportHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportHeaderTmpl,
		"report/header.tmpl",
	)
}

func reportHeaderTmpl() (*asset, error) {
	bytes, err := reportHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/header.tmpl", size: 3600, mode: os.FileMode(420), modTime: time.Unix(1497026514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportTestTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x97\x5d\x6f\xf2\x36\x14\xc7\xef\xf9\x14\x7e\xb2\x9b\x3e\xd2\x9c\x17\x02\x3c\x84\x01\x52\x5f\xd0\x5a\xa9\xdb\x53\xad\xdc\xf4\x6a\x72\xec\x63\x62\xea\xd8\x99\x6d\x68\x69\xd5\xef\x3e\x25\x74\x42\x09\xb4\x85\xbe\x48\x8b\x84\x64\x83\x7d\xfe\xbf\x73\xfe\x07\x83\x87\xdf\xce\x7e\x9e\x4e\x6f\xae\x26\x28\x73\xb9\x1c\xb7\x5a\x08\x21\x34\x3c\x9f\x1c\x9f\x8d\xab\x61\x35\x9d\x5e\x4c\x2f\x27\xe3\xc7\x47\xff\x54\x2b\x2e\x66\xfe\xf1\xd5\xc5\x9f\x24\x87\xa7\x27\x74\xbc\x70\x3a\x27\x0e\x18\xba\x02\xc3\xb5\xc9\x89\xa2\x80\xa6\x60\x1d\xfa\x0b\x0a\x6d\xdc\x30\x58\x6f\x6e\xb5\x36\xe1\x2c\x35\xa2\x70\xc8\x1a\x3a\xf2\x32\xe7\x8a\x41\x10\xd0\x78\x6e\x7d\x6d\x66\xc1\xdc\x06\xf3\x7f\x16\x60\x56\x38\xf2\xa3\xc8\x0f\xfd\x5c\x28\x9c\x44\x61\xd8\xeb\xf1\xd4\x9f\x5b\x0f\xb9\x55\x01\x23\xcf\xc1\xbd\x0b\xe6\x64\x49\xd6\xc1\xbc\xf1\x30\x58\x8f\xc6\x7b\xeb\xb0\x18\xc7\x7e\xf7\x59\x22\x4e\xbb\xbd\x4e\x9c\xb4\x3f\x57\x82\xc6\x55\xf0\xa8\x9d\x44\x6d\x9e\xf6\x0e\x0c\xfe\x0d\xe3\xb7\x04\xb8\x5e\x28\x46\x9c\xd0\x6a\x2d\xc4\x38\xf4\xa3\x28\xdc\x4b\x08\xe3\xc3\xb4\x32\x31\xcb\xa4\x98\x65\xce\x2f\x08\xbd\xc5\x1d\xc2\xbb\x61\xd8\x61\x5f\xa2\xb5\x04\xc5\xb4\x09\x72\xcd\xc0\x28\xf1\x60\x70\xdb\xef\xf9\x51\x95\x63\xaf\xcf\x19\xa5\x49\xb2\xb7\xee\x46\x58\x0a\x75\x8b\x32\x03\x7c\x5b\x93\x5a\x1b\xa8\xb2\x7f\xa5\x78\x00\x0c\x9d\x5e\x97\xa6\xfd\x9e\x4f\xad\xf5\x50\x0e\x4c\x90\x91\x67\xa9\x01\x50\x1e\x32\x20\x47\x9e\x75\x2b\x09\x36\x03\x70\x35\x88\x6a\x7d\x30\xde\x5b\xb2\xe1\x5f\xf2\xa3\xcf\x3a\x14\xfa\x5f\xae\x4b\x63\x9c\x86\x71\xd4\xee\x72\xf2\xe5\x5a\x55\x18\x9c\x24\x3c\xed\x27\xfd\xe4\xe3\x72\x65\xfb\xbc\x25\x49\xf2\x42\x82\x0d\x68\x46\x8c\xfb\xdb\x16\x52\x28\xc0\x8c\xc4\x09\x89\x01\xde\x4b\xb0\xd5\xc3\x6f\x40\x38\x9d\x6b\x63\xf4\x1d\x66\x3f\x28\x0f\x93\x76\xf4\x11\xe1\x8d\xf2\xf5\xf4\xe6\x72\xd2\x5c\xb5\x21\x2b\x9f\x93\x9f\x67\x37\xe8\xb1\xf6\x56\xf9\xa4\x84\xde\xce\x4c\xd9\x71\x03\x74\x97\x09\x07\xbf\x6d\x2d\xa1\x5a\x6a\x33\x40\xa9\x24\xf4\xb6\xf6\xe1\x53\xab\x36\xf5\x9d\x2e\x4e\x88\xd9\xd6\x28\x08\x63\x42\xcd\xb0\xd3\xc5\x00\xe1\x28\x2c\xee\xb7\x45\x36\x1c\xf8\x59\xef\xb2\x3c\x56\xae\x25\x71\xf0\xbb\x21\xab\x1d\x3b\xb4\x61\x60\x70\x55\xa6\x01\x9a\x19\xad\x97\x0d\xf8\x06\x5f\x16\xf9\xcf\x24\x3b\xea\xf0\x1f\xa3\x04\xee\x06\xa8\xbf\x93\x91\x6b\xe5\x06\x28\x0e\x8b\x7b\x44\x8c\x20\xf2\x57\x64\x89\xb2\xd8\x82\x11\xfc\xc5\xb2\xbd\x50\xd4\xd2\x25\x6c\x33\xc2\xf4\xdd\x00\x45\xc5\x7d\xf5\xaa\x52\xde\xce\xb6\x99\x47\xfc\xc1\x3c\x3e\x93\xac\x06\xd6\xfb\x1f\x81\xd5\x5b\x93\x89\xe5\x39\x90\x12\xe0\xb5\xaf\x40\xad\xf5\x4e\xe4\x62\x07\x44\xbd\xeb\x94\x56\xaf\xf7\x9c\xef\x48\x2a\xe1\xea\xdd\x55\x69\x84\xfb\x25\x87\x5c\x9b\xd5\xa9\x56\x8e\x08\x05\x66\x47\xc4\x0c\x4a\xf8\x41\x27\x7c\x2d\xd6\x30\xa8\x4e\x8c\xad\x3f\x2d\xf5\x23\x63\x49\x0c\x12\xf6\x8f\x4a\xf2\x58\x11\xb9\xb2\xc2\x9e\x0b\xc6\x40\xa1\x11\xe2\x44\xda\x46\xee\x7c\xa1\x68\xf9\xb3\x85\x32\xc1\xa0\xbe\xed\xe8\xfb\x36\xa9\xe0\x47\xbb\xa3\xef\x58\x5b\x3e\x4c\xd3\x45\x0e\xca\xf9\x33\x70\x13\x09\xe5\xf0\x64\x75\xc1\x8e\xbc\x46\x51\xbc\xef\x7e\x65\x8f\xcf\x84\x2d\x24\x59\xa1\x11\xf2\x84\x2a\x8f\x7b\x6f\xdb\xcf\x0a\xe4\x80\x1c\xab\x42\x82\xb4\xf0\xf9\x8c\x65\x33\x1d\x4a\xe8\xcc\xae\x26\x6d\x74\x4d\x63\xba\xb6\xf5\x1a\xcc\x52\x50\x38\xd8\xd7\xc6\xbe\x17\x8d\xdd\x19\xff\x50\x67\xed\x3a\xc8\x47\xac\x3d\x20\x4f\xf4\x4e\x6f\xf7\xa1\x7c\xd5\xdc\x97\x18\x0f\x75\x77\x73\x5f\x58\x5f\xd9\x82\xf5\x9d\x6d\x3d\x49\x35\x5b\x8d\xff\x0d\x00\x00\xff\xff\x1f\x48\x7c\x53\xdb\x0d\x00\x00")

func reportTestTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportTestTmpl,
		"report/test.tmpl",
	)
}

func reportTestTmpl() (*asset, error) {
	bytes, err := reportTestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/test.tmpl", size: 3547, mode: os.FileMode(420), modTime: time.Unix(1493141754, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"report/content.tmpl": reportContentTmpl,
	"report/footer.tmpl": reportFooterTmpl,
	"report/header.tmpl": reportHeaderTmpl,
	"report/test.tmpl": reportTestTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"report": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{reportContentTmpl, map[string]*bintree{}},
		"footer.tmpl": &bintree{reportFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{reportHeaderTmpl, map[string]*bintree{}},
		"test.tmpl": &bintree{reportTestTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

