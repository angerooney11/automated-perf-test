// Code generated by go-bindata.
// sources:
// report/content.tmpl
// report/footer.tmpl
// report/header.tmpl
// report/test.tmpl
// DO NOT EDIT!

package perfTestUtils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _reportContentTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\xdf\x6f\xdb\x36\x10\x7e\x4e\xfe\x8a\x83\x66\x23\x0e\x50\xd8\x49\xbb\x04\x9b\x26\x1b\xb0\xbb\xad\x4d\xd7\x0c\x46\x9d\xf5\x65\xd8\x03\x2d\x9e\x65\x2e\x32\xe9\x91\xb4\x1b\x4f\xd5\xff\x3e\x50\xbf\x2c\x5b\xa2\xac\x16\xcb\x30\x01\x7e\xb0\x74\xbc\xfb\x78\xf7\xdd\xf1\x63\x14\x51\x5c\x30\x8e\xe0\xf8\x82\x6b\xe4\xda\x89\xe3\x73\x00\x8f\xb2\x2d\xf8\x21\x51\x6a\xe8\x68\xb1\x9e\x10\xe9\x8c\xce\xa1\xf4\x78\xcb\xeb\xfc\xfb\x9a\x50\xca\x78\xe0\x8c\xa2\xa8\xff\x5a\xf0\x05\x0b\xfa\xe3\xe9\xdd\xaf\x64\x85\x71\x0c\xae\x0b\xe3\x8d\x16\x2b\xa2\x91\xc2\x14\xe5\x42\xc8\x15\xe1\x3e\xc2\x03\x2a\x0d\x1f\x70\x2d\xa4\x36\x46\xbd\x28\xea\x9b\xcf\x33\x4d\xb4\xea\xbf\x41\x6d\xbe\x3f\x30\xe3\xe3\xd2\x1b\x2c\xaf\xf7\xd1\xbd\x01\x65\xdb\xd2\xdf\x12\x52\xca\xb6\x6f\x91\xa4\x60\xf6\x68\x3d\x4d\xe6\x21\xd6\xd8\xc0\x5c\x48\x8a\x72\xe8\x5c\x39\xf0\x89\x51\xbd\x1c\x3a\xdf\x5f\x75\x4b\x4b\x3d\x2d\x0f\x77\x7d\x90\x01\x4d\xf3\x55\x37\x66\x95\xb7\xbc\xad\x64\xe4\xad\x50\x1a\x36\x9c\xa2\x04\x8d\x4a\xbb\xb0\x4f\xd1\x03\x91\x01\x6a\x63\x10\xc7\xee\xf1\xeb\xa9\x90\x3a\x8e\xbd\xc1\xf2\x76\xe4\x0d\x34\xb5\x83\x68\x00\xf5\xf2\xc6\x02\x6a\x86\x72\xcb\x7c\x54\x47\xc0\x42\xe4\x50\x2a\x41\x66\xf5\x01\xd5\x5a\x70\x85\xa6\x14\xea\xd9\x20\x9d\x70\xeb\x0d\x6c\x85\xf0\x06\x49\x71\x6d\x1f\xdb\x30\x05\x04\xf7\x43\xe6\x3f\x0e\x9d\x25\xa3\x78\x8f\x2b\x21\x77\x63\x4e\xc2\x9d\x62\xaa\x77\x79\x4c\xfb\xaf\xe6\xd2\xde\x83\x6d\x2b\x15\x3e\xbd\xaa\xe4\x29\x45\x07\x39\x3c\x6f\xb0\x7c\xd5\x94\xb6\x16\x99\x1f\x87\xa1\xf8\x84\x14\x3e\x12\xc9\x92\xbe\x2c\x73\x34\xf9\x68\x36\x3c\x45\xf2\x98\xc6\x2e\xec\x3e\xc3\x5a\x32\xae\x17\xe0\x74\xbf\xed\xbf\x5c\x38\x71\xdc\x3d\x55\xc5\x16\x70\xa2\x88\x2d\xa0\x7f\xa7\xd2\x60\x53\xa2\x14\xc4\xb1\xb7\x10\x5c\x83\x2f\x42\x21\x87\x4e\x20\x11\xb9\x33\x9a\x8e\x67\x33\x6f\x60\x3e\x8c\xa2\x08\x43\x85\x47\x66\x12\xa9\x33\xfa\x79\x7c\xf7\x7e\x6f\xc4\x69\x23\x7f\xab\x24\xab\x90\xab\x8e\x50\x8c\x0e\x9d\x55\x82\xf6\xb5\xe0\x9a\x30\x8e\x95\x51\x59\x9e\xa5\x49\x36\xf3\xdd\xd6\x90\xa3\x4c\xaf\x3c\x2b\xcd\x84\x6a\x24\x55\x9e\xf7\xdc\xc5\xf5\xed\x95\x33\xf2\x26\xa3\x09\x51\x08\xa6\xaa\x90\x66\xda\xf5\x06\x93\x13\x7d\xed\x69\x6a\x26\xbc\x59\xb9\x9f\x12\xe9\xbf\x9c\x1c\xf0\x19\x56\xb8\x7a\x10\xf7\x13\xf8\x0c\xc9\xa4\xd7\xf7\xb8\x8a\xe3\xfb\xc9\x49\xd7\x05\xc0\x1b\x03\x70\x3e\x4a\x8e\x87\x43\x80\xf3\x76\x00\xf7\xe0\xfe\x5d\x60\xd7\x29\xb0\x6e\xd1\x2a\xed\x20\x41\x42\x69\x2e\xf4\x21\xad\xe3\x58\xe9\x5d\x88\x43\x27\xe1\xab\x6b\xe8\x9a\x51\x34\xdd\xc3\x71\xbf\x4d\x51\xfa\xc8\x35\x09\xf0\x70\x07\xdd\x2f\x9d\x9a\xb5\x13\x33\x23\xb6\x8d\xb6\x17\x7e\x4e\xed\x8b\x1a\x87\x65\xbb\x25\x91\xba\xc6\x06\x4a\xdd\x72\xf1\x9e\x71\x7c\x9d\x1a\x1e\x35\xd4\x11\x9c\x53\xaf\x94\x2f\xd9\x5a\x57\x97\x6f\x89\x84\x22\xc8\xbb\x19\x0c\xc1\x7f\xd5\x0f\x90\xa3\x24\x1a\x7b\x51\xc5\x9e\x12\x4d\x5c\xa8\xbe\x37\x8f\x2f\xc2\xcd\x8a\x2b\x17\x7e\xb7\x15\x39\x8a\xfe\x54\x82\xdf\xe3\x0a\x1c\xd3\x0d\x0e\x1c\xb5\x48\x76\xa2\x6c\x28\xd3\x71\xfc\xa2\x85\x17\x43\x7d\xa7\x7c\x14\x1f\x78\xa8\x75\xf0\x47\xe5\x6d\x4d\xa4\xbf\x85\x58\xd9\xb6\x89\xdc\x90\x82\xba\xa0\xe5\x06\xdb\x38\x03\xb5\x99\x27\xd5\xb6\x79\x54\x4b\xf1\xa9\xbd\x3b\xf2\xc4\x94\xcd\xd3\xce\xf6\xc1\x3c\x21\x99\x63\xe8\xc2\x45\xd6\xe7\xbd\x5f\x26\x97\x17\xb5\xc6\x35\x41\x6b\x5e\x05\x92\x51\x6b\xb8\xa7\x46\x20\x8c\x63\x13\x4d\x0e\x9e\x28\xea\xbf\x53\x82\x9b\x4a\x4f\x89\xd4\x4c\x33\xc1\x95\xa5\xb6\xe5\xa7\x5a\xe7\xe2\xa9\x5f\x7c\xf8\x36\xbe\xfc\xe1\xd0\xaa\xd3\x73\xbe\x29\x3a\xc5\xb9\xec\x93\xf5\x1a\x39\xed\x95\x9a\xa7\x8f\x21\xae\x90\xeb\xa3\x95\xde\xe0\xb8\xf9\x8e\x47\x48\x2b\xb5\x95\x89\xcc\xff\xab\xdc\xca\xe0\x41\x2e\x82\xc1\xa8\xe0\xff\x5e\x7d\xd5\x48\xf1\x67\x96\x61\x07\x52\x2a\xd7\x64\x26\x6e\x7a\x74\x95\x34\x58\x2e\xbe\x0a\xbd\x55\x08\xad\x44\x76\x3d\x8f\xde\x52\x69\x42\xea\x04\x57\x4b\xb1\x95\x11\xeb\x14\x75\x20\x3b\xa4\xe7\xc4\x7f\x0c\xa4\xd8\x70\xea\xbe\x67\xc1\x52\xbf\x91\x64\x67\x95\x62\xfb\xf4\x7e\xd7\x2d\xb4\x8c\xb9\x0e\x37\xeb\x85\xb2\xd6\xc8\x16\x9a\x83\x24\xa1\x5c\xef\x9e\x85\x21\xbb\xfc\x62\x07\xf9\x25\xfa\xab\x1d\x74\xb7\x19\xd1\xbe\x3c\xf4\x74\x66\x5f\x93\xd6\xbe\xd6\x55\x14\x49\xc2\x03\x84\xce\x23\xee\x5e\x40\x67\x6e\x84\xaa\x3b\x84\x4e\x8d\xf0\xac\xbf\xa2\xd6\x7a\x3d\x4b\x5d\x77\xc8\x36\x30\xde\x18\xa7\xf8\x04\x9d\x13\xd7\xdd\x04\x03\x9c\xf0\xa8\xd7\xaa\xd1\xe3\xc3\xba\x95\x1f\xa3\x11\xd3\x4d\x83\x33\xd3\x44\xea\xdf\xd6\x4e\xd3\x8a\xb3\x74\x0d\xfe\x05\xc9\x9e\xae\x6c\xb6\x67\x79\x81\x24\x2c\xd1\x50\x77\x78\x7d\xb5\x7e\x1a\xa5\x5a\xd9\x84\x33\xad\xaa\x69\xf6\xc2\x34\x4f\x9a\xf2\x6b\xbc\x3d\x14\x9a\x85\x95\x69\xf2\x9f\x7e\xcc\xff\x42\x45\xc6\x1e\x18\x58\x2f\xee\x67\x66\x03\xe9\xe8\x38\x3f\x3b\x7b\x06\x98\x99\x95\x49\x8e\xd5\x28\xcd\x61\xa7\x7f\xa7\xf2\x62\x65\x23\x0e\xd2\x90\x39\xc2\x06\xa9\x4e\xb6\xc1\x47\x22\xd3\x38\x29\xa4\xda\x89\x5c\x80\x4a\xf8\x52\x35\x39\x91\xad\x83\x27\x0b\xde\x68\xd8\x60\x53\xf7\xa9\xd5\xe4\x3d\x71\x17\x68\x73\x0f\x28\xee\x00\x73\x22\xed\x57\x80\xe3\xe0\x47\x7f\x6b\x64\xbf\x51\xfc\xb9\xcb\x67\x17\xfc\x85\x7a\x63\x2b\x1c\x4b\x49\x76\x36\x51\x5e\x2f\xf6\xf5\x6e\x8d\x2e\x98\x0c\x54\x85\xea\x73\xab\xf6\x39\x91\x36\x5f\xc9\xf8\x6e\x12\xb8\x92\x68\x26\x5c\xb8\xea\xdf\xb4\x50\x9a\x96\xf8\x36\x99\x6f\x95\xf8\xb9\xbc\x1f\x6f\x83\x44\x85\x41\xe9\x34\x9b\xa1\x2f\x38\x55\x35\x7a\xdf\x72\xcd\x6a\xd4\xef\x59\x59\x7c\xa2\x31\x10\x72\x77\x61\xbd\xa9\x41\x66\xc2\x8c\xdc\x2f\x51\x21\x1b\x21\xe6\xa0\xb7\x9d\x42\x35\x39\x6a\xd4\xe7\x46\x9e\xe7\xb4\xde\xab\xf3\x3d\xd1\x6b\xc4\xb9\x55\x98\x17\x7f\xe7\x72\xd4\xf4\x3b\xcf\xe6\xc3\x3f\x01\x00\x00\xff\xff\x47\xec\xa7\x2e\x19\x18\x00\x00")

func reportContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportContentTmpl,
		"report/content.tmpl",
	)
}

func reportContentTmpl() (*asset, error) {
	bytes, err := reportContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/content.tmpl", size: 6169, mode: os.FileMode(420), modTime: time.Unix(1481302555, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\xaa\xad\xe5\x52\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x4e\xcd\x4b\xa9\xad\x05\x04\x00\x00\xff\xff\x70\x9a\x96\xda\x2c\x00\x00\x00")

func reportFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportFooterTmpl,
		"report/footer.tmpl",
	)
}

func reportFooterTmpl() (*asset, error) {
	bytes, err := reportFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/footer.tmpl", size: 44, mode: os.FileMode(420), modTime: time.Unix(1468393650, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x97\x5b\x6f\xe2\x38\x14\xc7\xdf\xf9\x14\x9e\xec\xcb\x8c\xb4\xce\x85\x50\x86\xb0\x80\xd4\x0b\xda\x56\xea\xee\x54\x5b\x5e\xfa\xb4\x72\xec\x63\x62\xea\xd8\x59\xdb\xd0\x32\x88\xef\xbe\x4a\xe8\x0a\x25\xd0\x16\x7a\x91\x36\x12\x92\x0d\xf6\xf9\xff\xce\xf9\x1f\x0c\x5e\xad\x18\x70\xa1\x00\x79\x19\x10\x06\xc6\x5b\xaf\x5b\x83\x2f\x17\x3f\xce\x27\x77\x37\x63\x94\xb9\x5c\x8e\x5a\x2d\x84\x10\x1a\x5c\x8e\x4f\x2f\x46\xd5\xb0\x9a\x4e\xae\x26\xd7\xe3\xd1\x6a\xe5\x9f\x6b\xc5\xc5\xd4\x3f\xbd\xb9\xfa\x93\xe4\xb0\x5e\xa3\xd3\xb9\xd3\x39\x71\xc0\xd0\x0d\x18\xae\x4d\x4e\x14\x05\x34\x01\xeb\xd0\x5f\x50\x68\xe3\x06\xc1\x66\x73\xab\xb5\x0d\x67\xa9\x11\x85\x43\xd6\xd0\xa1\x97\x39\x57\xf4\x83\x80\xc6\x33\xeb\x6b\x33\x0d\x66\x36\x98\xfd\x33\x07\xb3\xc4\x91\x1f\x45\x7e\xe8\xe7\x42\xe1\x24\x0a\xc3\x6e\x97\xa7\xfe\xcc\x7a\xc8\x2d\x0b\x18\x7a\x0e\x1e\x5d\x30\x23\x0b\xb2\x09\xe6\x8d\x06\xc1\x66\x34\x3a\x58\x87\xc5\x38\xf6\x4f\x9e\x24\xe2\xf4\xa4\xdb\x89\x93\xf6\xc7\x4a\xd0\xb8\x0a\x1e\xb5\x93\xa8\xcd\xd3\xee\x91\xc1\xbf\x60\xfc\x9a\x00\xd7\x73\xc5\x88\x13\x5a\x6d\x84\x18\x87\x5e\x14\x85\x07\x09\x61\x7c\x9c\x56\x26\xa6\x99\x14\xd3\xcc\xf9\x05\xa1\xf7\xb8\x43\xf8\x49\x18\x76\xd8\xa7\x68\x2d\x40\x31\x6d\x82\x5c\x33\x30\x4a\xfc\x34\xb8\xed\x77\xfd\xa8\xca\xb1\xdb\xe3\x8c\xd2\x24\x39\x58\x77\x2b\x2c\x85\xba\x47\x99\x01\xbe\xab\x49\xad\x0d\x54\xd9\xbf\x52\xfc\x04\x0c\x9d\xee\x09\x4d\x7b\x5d\x9f\x5a\xeb\xa1\x1c\x98\x20\x43\xcf\x52\x03\xa0\x3c\x64\x40\x0e\x3d\xeb\x96\x12\x6c\x06\xe0\x6a\x10\xd5\xfa\x60\x74\xb0\x64\xc3\xbf\xe4\x7b\x8f\x75\x28\xf4\x3e\x5d\x97\xc6\x38\x0d\xe3\xa8\x7d\xc2\xc9\xa7\x6b\x55\x61\x70\x92\xf0\xb4\x97\xf4\x92\xf7\xcb\x95\xed\xf3\x9a\x24\xc9\x0b\x09\x36\xa0\x19\x31\xee\x6f\x5b\x48\xa1\x00\x33\x12\x27\x24\x06\x78\x2b\xc1\x4e\x0f\xbf\x02\xe1\x74\xae\x8d\xd1\x0f\x98\x7d\xa7\x3c\x4c\xda\xd1\x7b\x84\xb7\xca\xb7\x93\xbb\xeb\x71\x73\xd5\x96\xac\x7c\xce\x7e\x5c\xdc\xa1\x55\xed\xad\xf2\x49\x09\xbd\x9f\x9a\xb2\xe3\xfa\xe8\x21\x13\x0e\x7e\xdb\x59\x42\xb5\xd4\xa6\x8f\x52\x49\xe8\x7d\xed\xc3\x75\xab\x36\xf5\x9d\x2e\xce\x88\xd9\xd5\x28\x08\x63\x42\x4d\xb1\xd3\x45\x1f\xe1\x28\x2c\x1e\x77\x45\xb6\x1c\xf8\x49\xef\xba\x3c\x56\x6e\x25\x71\xf0\xbb\x21\xcb\x3d\x3b\xb4\x61\x60\x70\x55\xa6\x3e\x9a\x1a\xad\x17\x0d\xf8\x06\x5f\x16\xf9\x4f\x24\x7b\xea\xf0\x1f\xa3\x04\xee\xfa\xa8\xb7\x97\x91\x6b\xe5\xfa\x28\x0e\x8b\x47\x44\x8c\x20\xf2\x57\x64\x89\xb2\xd8\x82\x11\xfc\xd9\xb2\x3d\x53\xd4\xd2\x25\x6c\x33\xc2\xf4\x43\x1f\x45\xc5\x63\xf5\xaa\x52\xde\xcd\xb6\x99\x47\xfc\xce\x3c\x3e\x92\xac\x06\xd6\xfd\x1f\x81\xd5\x5b\x93\x89\xc5\x25\x90\x12\xe0\xa5\xaf\x40\xad\xf5\xce\xe4\x7c\x0f\x44\xbd\xeb\x94\x56\x2f\xf7\x9c\xef\x48\x2a\xe1\xe6\xcd\x55\x69\x84\xfb\x25\x87\x5c\x9b\xe5\xb9\x56\x8e\x08\x05\x66\x4f\xc4\x0c\x4a\xf8\x7e\x27\x7c\x29\xd6\x20\xa8\x4e\x8c\x9d\x3f\x2d\xf5\x23\x63\x41\x0c\x12\xf6\x8f\x4a\xf2\x54\x11\xb9\xb4\xc2\x5e\x0a\xc6\x40\xa1\x21\xe2\x44\xda\x46\xee\x7c\xae\x68\xf9\xb3\x85\x32\xc1\xa0\xbe\xed\xeb\xb7\x5d\x52\xc1\xbf\xee\x8f\xbe\x67\x6d\xf9\x30\x4d\xe7\x39\x28\xe7\x4f\xc1\x8d\x25\x94\xc3\xb3\xe5\x15\xfb\xea\x35\x8a\xe2\x7d\xf3\x2b\x7b\x7c\x26\x6c\x21\xc9\x12\x0d\x91\x27\x54\x79\xdc\x7b\xbb\x7e\x56\x20\x47\xe4\x58\x15\x12\xa4\x85\x8f\x67\x2c\x9b\xe9\x58\x42\x67\xf6\x35\x69\xa3\x6b\x1a\xd3\x8d\xad\xb7\x60\x16\x82\xc2\xd1\xbe\x36\xf6\x3d\x6b\xec\xde\xf8\xc7\x3a\x6b\x37\x41\xde\x63\xed\x11\x79\xa2\x37\x7a\x7b\x08\xe5\x8b\xe6\x3e\xc7\x78\xac\xbb\xdb\xfb\xc2\xe6\xca\x16\x6c\xee\x6c\x9b\x49\xaa\xd9\x72\xd4\x5a\xad\x40\xb1\xf5\xfa\xdf\x00\x00\x00\xff\xff\x71\xac\x47\x54\xf7\x0d\x00\x00")

func reportHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportHeaderTmpl,
		"report/header.tmpl",
	)
}

func reportHeaderTmpl() (*asset, error) {
	bytes, err := reportHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/header.tmpl", size: 3575, mode: os.FileMode(420), modTime: time.Unix(1468393650, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _reportTestTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x97\x5d\x6f\xf2\x36\x14\xc7\xef\xf9\x14\x7e\xb2\x9b\x3e\xd2\x9c\x17\x02\x3c\x84\x01\x52\x5f\xd0\x5a\xa9\xdb\x53\xad\xdc\xf4\x6a\x72\xec\x63\x62\xea\xd8\x99\x6d\x68\x69\xd5\xef\x3e\x25\x74\x42\x09\xb4\x85\xbe\x48\x8b\x84\x64\x83\x7d\xfe\xbf\x73\xfe\x07\x83\x87\xdf\xce\x7e\x9e\x4e\x6f\xae\x26\x28\x73\xb9\x1c\xb7\x5a\x08\x21\x34\x3c\x9f\x1c\x9f\x8d\xab\x61\x35\x9d\x5e\x4c\x2f\x27\xe3\xc7\x47\xff\x54\x2b\x2e\x66\xfe\xf1\xd5\xc5\x9f\x24\x87\xa7\x27\x74\xbc\x70\x3a\x27\x0e\x18\xba\x02\xc3\xb5\xc9\x89\xa2\x80\xa6\x60\x1d\xfa\x0b\x0a\x6d\xdc\x30\x58\x6f\x6e\xb5\x36\xe1\x2c\x35\xa2\x70\xc8\x1a\x3a\xf2\x32\xe7\x8a\x41\x10\xd0\x78\x6e\x7d\x6d\x66\xc1\xdc\x06\xf3\x7f\x16\x60\x56\x38\xf2\xa3\xc8\x0f\xfd\x5c\x28\x9c\x44\x61\xd8\xeb\xf1\xd4\x9f\x5b\x0f\xb9\x55\x01\x23\xcf\xc1\xbd\x0b\xe6\x64\x49\xd6\xc1\xbc\xf1\x30\x58\x8f\xc6\x7b\xeb\xb0\x18\xc7\x7e\xf7\x59\x22\x4e\xbb\xbd\x4e\x9c\xb4\x3f\x57\x82\xc6\x55\xf0\xa8\x9d\x44\x6d\x9e\xf6\x0e\x0c\xfe\x0d\xe3\xb7\x04\xb8\x5e\x28\x46\x9c\xd0\x6a\x2d\xc4\x38\xf4\xa3\x28\xdc\x4b\x08\xe3\xc3\xb4\x32\x31\xcb\xa4\x98\x65\xce\x2f\x08\xbd\xc5\x1d\xc2\xbb\x61\xd8\x61\x5f\xa2\xb5\x04\xc5\xb4\x09\x72\xcd\xc0\x28\xf1\x60\x70\xdb\xef\xf9\x51\x95\x63\xaf\xcf\x19\xa5\x49\xb2\xb7\xee\x46\x58\x0a\x75\x8b\x32\x03\x7c\x5b\x93\x5a\x1b\xa8\xb2\x7f\xa5\x78\x00\x0c\x9d\x5e\x97\xa6\xfd\x9e\x4f\xad\xf5\x50\x0e\x4c\x90\x91\x67\xa9\x01\x50\x1e\x32\x20\x47\x9e\x75\x2b\x09\x36\x03\x70\x35\x88\x6a\x7d\x30\xde\x5b\xb2\xe1\x5f\xf2\xa3\xcf\x3a\x14\xfa\x5f\xae\x4b\x63\x9c\x86\x71\xd4\xee\x72\xf2\xe5\x5a\x55\x18\x9c\x24\x3c\xed\x27\xfd\xe4\xe3\x72\x65\xfb\xbc\x25\x49\xf2\x42\x82\x0d\x68\x46\x8c\xfb\xdb\x16\x52\x28\xc0\x8c\xc4\x09\x89\x01\xde\x4b\xb0\xd5\xc3\x6f\x40\x38\x9d\x6b\x63\xf4\x1d\x66\x3f\x28\x0f\x93\x76\xf4\x11\xe1\x8d\xf2\xf5\xf4\xe6\x72\xd2\x5c\xb5\x21\x2b\x9f\x93\x9f\x67\x37\xe8\xb1\xf6\x56\xf9\xa4\x84\xde\xce\x4c\xd9\x71\x03\x74\x97\x09\x07\xbf\x6d\x2d\xa1\x5a\x6a\x33\x40\xa9\x24\xf4\xb6\xf6\xe1\x53\xab\x36\xf5\x9d\x2e\x4e\x88\xd9\xd6\x28\x08\x63\x42\xcd\xb0\xd3\xc5\x00\xe1\x28\x2c\xee\xb7\x45\x36\x1c\xf8\x59\xef\xb2\x3c\x56\xae\x25\x71\xf0\xbb\x21\xab\x1d\x3b\xb4\x61\x60\x70\x55\xa6\x01\x9a\x19\xad\x97\x0d\xf8\x06\x5f\x16\xf9\xcf\x24\x3b\xea\xf0\x1f\xa3\x04\xee\x06\xa8\xbf\x93\x91\x6b\xe5\x06\x28\x0e\x8b\x7b\x44\x8c\x20\xf2\x57\x64\x89\xb2\xd8\x82\x11\xfc\xc5\xb2\xbd\x50\xd4\xd2\x25\x6c\x33\xc2\xf4\xdd\x00\x45\xc5\x7d\xf5\xaa\x52\xde\xce\xb6\x99\x47\xfc\xc1\x3c\x3e\x93\xac\x06\xd6\xfb\x1f\x81\xd5\x5b\x93\x89\xe5\x39\x90\x12\xe0\xb5\xaf\x40\xad\xf5\x4e\xe4\x62\x07\x44\xbd\xeb\x94\x56\xaf\xf7\x9c\xef\x48\x2a\xe1\xea\xdd\x55\x69\x84\xfb\x25\x87\x5c\x9b\xd5\xa9\x56\x8e\x08\x05\x66\x47\xc4\x0c\x4a\xf8\x41\x27\x7c\x2d\xd6\x30\xa8\x4e\x8c\xad\x3f\x2d\xf5\x23\x63\x49\x0c\x12\xf6\x8f\x4a\xf2\x58\x11\xb9\xb2\xc2\x9e\x0b\xc6\x40\xa1\x11\xe2\x44\xda\x46\xee\x7c\xa1\x68\xf9\xb3\x85\x32\xc1\xa0\xbe\xed\xe8\xfb\x36\xa9\xe0\x47\xbb\xa3\xef\x58\x5b\x3e\x4c\xd3\x45\x0e\xca\xf9\x33\x70\x13\x09\xe5\xf0\x64\x75\xc1\x8e\xbc\x46\x51\xbc\xef\x7e\x65\x8f\xcf\x84\x2d\x24\x59\xa1\x11\xf2\x84\x2a\x8f\x7b\x6f\xdb\xcf\x0a\xe4\x80\x1c\xab\x42\x82\xb4\xf0\xf9\x8c\x65\x33\x1d\x4a\xe8\xcc\xae\x26\x6d\x74\x4d\x63\xba\xb6\xf5\x1a\xcc\x52\x50\x38\xd8\xd7\xc6\xbe\x17\x8d\xdd\x19\xff\x50\x67\xed\x3a\xc8\x47\xac\x3d\x20\x4f\xf4\x4e\x6f\xf7\xa1\x7c\xd5\xdc\x97\x18\x0f\x75\x77\x73\x5f\x58\x5f\xd9\x82\xf5\x9d\x6d\x3d\x49\x35\x5b\x8d\xff\x0d\x00\x00\xff\xff\x1f\x48\x7c\x53\xdb\x0d\x00\x00")

func reportTestTmplBytes() ([]byte, error) {
	return bindataRead(
		_reportTestTmpl,
		"report/test.tmpl",
	)
}

func reportTestTmpl() (*asset, error) {
	bytes, err := reportTestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "report/test.tmpl", size: 3547, mode: os.FileMode(420), modTime: time.Unix(1468393650, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"report/content.tmpl": reportContentTmpl,
	"report/footer.tmpl":  reportFooterTmpl,
	"report/header.tmpl":  reportHeaderTmpl,
	"report/test.tmpl":    reportTestTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"report": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{reportContentTmpl, map[string]*bintree{}},
		"footer.tmpl":  &bintree{reportFooterTmpl, map[string]*bintree{}},
		"header.tmpl":  &bintree{reportHeaderTmpl, map[string]*bintree{}},
		"test.tmpl":    &bintree{reportTestTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
